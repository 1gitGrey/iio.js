/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,23],$V2=[1,30],$V3=[1,19],$V4=[1,20],$V5=[1,21],$V6=[1,22],$V7=[1,25],$V8=[1,26],$V9=[1,31],$Va=[1,12],$Vb=[1,13],$Vc=[1,37],$Vd=[1,36],$Ve=[1,38],$Vf=[1,32],$Vg=[1,24],$Vh=[1,27],$Vi=[1,28],$Vj=[5,13,15,18,22,30,31,32,33,37,38,40,44,47,48,50,52,84,85,91,92],$Vk=[1,45],$Vl=[5,13,15,18,21,22,30,31,32,33,35,37,38,39,40,44,45,46,47,48,50,52,63,64,65,66,67,68,69,70,71,72,74,75,78,79,80,81,82,83,84,85,91,92],$Vm=[1,46],$Vn=[1,47],$Vo=[1,48],$Vp=[1,49],$Vq=[1,50],$Vr=[2,96],$Vs=[1,53],$Vt=[1,54],$Vu=[1,55],$Vv=[5,13,15,18,21,22,30,31,32,33,35,37,38,39,40,44,45,46,47,48,50,52,63,64,65,66,67,68,69,70,71,72,74,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],$Vw=[1,58],$Vx=[1,65],$Vy=[1,77],$Vz=[1,80],$VA=[1,81],$VB=[1,82],$VC=[1,83],$VD=[1,84],$VE=[1,85],$VF=[1,91],$VG=[1,90],$VH=[1,73],$VI=[1,75],$VJ=[1,86],$VK=[1,87],$VL=[1,88],$VM=[1,89],$VN=[1,78],$VO=[1,79],$VP=[1,95],$VQ=[15,18,22,35,37,38,39,40,48,50,52,63,64,65,66,67,68,69,70,72,74,75,78,79,80,82,83,84,85,91,92],$VR=[1,121],$VS=[1,126],$VT=[5,13,15,18,22,30,31,32,33,35,37,38,39,40,44,47,48,50,52,63,64,65,66,67,68,69,70,72,74,75,78,79,80,82,83,84,85,91,92],$VU=[5,13,15,18,21,22,30,31,32,33,35,37,38,39,40,44,45,46,47,48,50,52,63,64,65,66,67,68,69,70,71,72,74,75,78,79,80,81,82,83,84,85,86,87,91,92],$VV=[5,13,15,18,21,22,30,31,32,33,35,37,38,39,40,44,45,46,47,48,50,52,63,64,65,66,67,68,69,70,71,72,74,75,78,79,80,81,82,83,84,85,86,87,88,89,91,92],$VW=[15,18,37,38,40,48,50,52,84,85,91,92],$VX=[15,18,21,37,38,40,48,50,52,84,85,91,92],$VY=[15,21];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"iioscript":3,"statements":4,"eof":5,"statement":6,"definition":7,"declaration":8,"for_statement":9,"if_statement":10,"expression":11,"iio_cmd":12,"var_keyword":13,"assignment":14,"variable":15,"assign":16,"anon_fn":17,"fn_keyword":18,"(":19,"variables":20,")":21,"end":22,"fn_call":23,"expressions":24,"iio_fn":25,"dot":26,"value":27,"return":28,"random_property":29,"clear":30,"draw":31,"onresize":32,"obj_keyword":33,"obj_property":34,"color_keyword":35,"color_property":36,"width":37,"height":38,"size_keyword":39,"return_keyword":40,"add_fn":41,"alert_fn":42,"set_fn":43,"for_keyword":44,"to_keyword":45,"by_keyword":46,"if_keyword":47,"alert":48,"alertparam":49,"add":50,"genparams":51,"set":52,"genparam":53,"position_property":54,"size_property":55,"type":56,"outline_property":57,"alpha_property":58,"vel_property":59,"acc_property":60,"shrink_property":61,"grid_property":62,"type_circ":63,"type_x":64,"type_circle":65,"type_ellipse":66,"type_square":67,"type_rectangle":68,"type_grid":69,"shrink_keyword":70,"then_keyword":71,"center":72,"vector":73,"pos_keyword":74,"outline_keyword":75,"outline_params":76,"outline_param":77,"alpha_keyword":78,"vel_keyword":79,"acc_keyword":80,"delimiter_vector":81,"color_constant":82,"color_random":83,"random_keyword":84,"number":85,"+":86,"-":87,"*":88,"/":89,"^":90,"E":91,"PI":92,"$accept":0,"$end":1},
terminals_: {2:"error",5:"eof",13:"var_keyword",15:"variable",16:"assign",18:"fn_keyword",19:"(",21:")",22:"end",26:"dot",30:"clear",31:"draw",32:"onresize",33:"obj_keyword",35:"color_keyword",37:"width",38:"height",39:"size_keyword",40:"return_keyword",44:"for_keyword",45:"to_keyword",46:"by_keyword",47:"if_keyword",48:"alert",50:"add",52:"set",63:"type_circ",64:"type_x",65:"type_circle",66:"type_ellipse",67:"type_square",68:"type_rectangle",69:"type_grid",70:"shrink_keyword",71:"then_keyword",72:"center",74:"pos_keyword",75:"outline_keyword",77:"outline_param",78:"alpha_keyword",79:"vel_keyword",80:"acc_keyword",81:"delimiter_vector",82:"color_constant",83:"color_random",84:"random_keyword",85:"number",86:"+",87:"-",88:"*",89:"/",90:"^",91:"E",92:"PI"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,2],[7,1],[8,2],[14,3],[17,6],[17,5],[23,4],[23,3],[23,1],[23,3],[20,1],[20,2],[11,1],[11,1],[11,1],[11,1],[11,1],[12,1],[12,1],[12,2],[12,4],[12,4],[34,1],[34,1],[34,1],[34,1],[28,2],[24,1],[24,2],[25,1],[25,1],[25,1],[9,9],[9,11],[10,4],[42,3],[49,1],[49,1],[41,3],[43,3],[51,1],[51,2],[53,1],[53,1],[53,1],[53,2],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[62,3],[61,2],[61,5],[54,1],[54,1],[54,2],[54,2],[54,2],[57,3],[57,3],[76,1],[76,1],[58,2],[59,2],[60,2],[73,3],[73,5],[55,1],[55,2],[55,4],[36,1],[36,1],[36,2],[29,4],[27,1],[27,1],[27,1],[27,1],[27,3],[27,3],[27,3],[27,3],[27,3],[27,1],[27,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return "(function() { \n\treturn function(app, settings) {\n\n" + $$[$0-1] + "\t}\n})()" 
break;
case 2:
this.$ = "\t\t"+$$[$0];
break;
case 3:
this.$ = $$[$0-1] + $$[$0];
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 32: case 33: case 34: case 35: case 39: case 40: case 41: case 75: case 76:
this.$ = $$[$0];
break;
case 10:
this.$ = 'var ' + $$[$0] + '\n' 
break;
case 11:
this.$ = $$[$0] + '\n'
break;
case 12:
this.$ = 'var ' + $$[$0] + ';\n' 
break;
case 13:
this.$ = $$[$0-2] + ' = ' + $$[$0] + ';' 
break;
case 14:
this.$ = 'function(' + $$[$0-3] + '){ \n' + $$[$0-1] + '\n\t}\n' 
break;
case 15:
this.$ = 'function(){ \n' + $$[$0-1] + '\n\t}\n' 
break;
case 16:
this.$ = '\t\t' + $$[$0-3] + '(' +$$[$0-1] + ');\n' 
break;
case 17:
this.$ = '\t\t' + $$[$0-2] + '();\n' 
break;
case 18:
this.$ = 'app.' + $$[$0]
break;
case 19:
this.$ = $$[$0-2] + '.' + $$[$0]
break;
case 20: case 22: case 23: case 24: case 25: case 26: case 37: case 47: case 50: case 73: case 82: case 83: case 93: case 96:
this.$ = $$[$0]
break;
case 21: case 38:
this.$ = $$[$0-1] + ", " + $$[$0]
break;
case 27:
this.$ = "app.objs = [];\n" 
break;
case 28:
this.$ = "app.draw();" 
break;
case 29:
this.$ = "this.resize = " + $$[$0] + ";\n" 
break;
case 30: case 31:
this.$ = 'o.' + $$[$0-1] + ' = ' + $$[$0] + ';' 
break;
case 36:
this.$ = "\t\treturn " + $$[$0]
break;
case 42:
this.$ = '\t\tfor(var ' + $$[$0-6] + ' = ' + $$[$0-4] + '; '+$$[$0-6]+'<'+$$[$0-2]+';'+$$[$0-6]+'++) {\n' + $$[$0-1] + '\t\t}\n'
break;
case 43:
this.$ = '\t\tfor(var ' + $$[$0-8] + ' = ' + $$[$0-6] + '; '+$$[$0-8]+'<'+$$[$0-4]+';'+$$[$0-8]+'+=' + $$[$0-2] + ') {\n' + $$[$0-1] + '\t\t}\n'
break;
case 44:
this.$ = "\t\tif(" + $$[$0-2] + "){\n" + $$[$0-1] + "\t\t}\n"
break;
case 45:
this.$ = "alert(" + $$[$0-1] + " );\n" 
break;
case 46: case 53: case 57: case 60: case 61: case 62: case 79: case 80: case 81: case 91:
this.$ = $$[$0] 
break;
case 48:
this.$ = "add({\n\t\t\t" + $$[$0-1] + "\n\t\t});\n\n" 
break;
case 49:
this.$ = "set({\n\t\t\t" + $$[$0-1] + "\n\t\t});\n\n" 
break;
case 51:
this.$ = $$[$0-1] + ",\n\t\t\t" + $$[$0] 
break;
case 52:
this.$ = "pos: " + $$[$0] 
break;
case 54: case 55:
this.$ = "color: " + $$[$0] 
break;
case 56:
this.$ = "type: " + $$[$0] 
break;
case 58:
this.$ = "alpha: " + $$[$0] 
break;
case 59:
this.$ = "vel: " + $$[$0] 
break;
case 63: case 65: case 66:
this.$ = "iio.CIRC" 
break;
case 64:
this.$ = "iio.X" 
break;
case 67: case 68:
this.$ = "iio.RECT" 
break;
case 69:
this.$ = "type:iio.GRID,\n\t\t\tgridColor:" + $$[$0-1] + ",\n\t\t\tC: " + $$[$0] + ",\n\t\t\tR: " + $$[$0] 
break;
case 70:
this.$ = "shrink:[" + $$[$0] + "\t\t\t]" 
break;
case 71:
this.$ = "shrink:[" + $$[$0-3] + ",function(o){" + $$[$0-1] + "\t\t\t}]" 
break;
case 72: case 74:
this.$ = "app.center"
break;
case 77:
this.$ = "lineWidth: "+$$[$0-1]+", outline: "+$$[$0] 
break;
case 78:
this.$ = "outline: "+$$[$0-1]+", lineWidth: "+$$[$0] 
break;
case 84:
this.$ = '{ x: ' + $$[$0-2] + ', y: ' + $$[$0] + '}' 
break;
case 85:
this.$ = '{ x: ' + $$[$0-4] + ', y: ' + $$[$0-2] + ', r:' + $$[$0] + '}'
break;
case 86: case 87:
this.$ = "width: " + $$[$0] 
break;
case 88:
this.$ = "width: " + $$[$0-2]+ ", height: " + $$[$0] 
break;
case 89:
this.$ = "'" + $$[$0] + "'" 
break;
case 90:
this.$ = "iio.random.color()" 
break;
case 92:
this.$ = "iio.random.num("+$$[$0-2]+","+$$[$0]+")" 
break;
case 94:
this.$ = "app.width"
break;
case 95:
this.$ = "app.height"
break;
case 97:
this.$ = $$[$0-2] + '+' + $$[$0];
break;
case 98:
this.$ = $$[$0-2] + '-' + $$[$0];
break;
case 99:
this.$ = $$[$0-2] + '*' + $$[$0];
break;
case 100:
this.$ = $$[$0-2] + '/' + $$[$0];
break;
case 101:
this.$ = 'Math.pow('+ $$[$0-2] + ',' + $$[$0] + ')' 
break;
case 102:
this.$ = 'Math.E' 
break;
case 103:
this.$ = 'Math.PI' 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:11,15:$V1,17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,30:$V3,31:$V4,32:$V5,33:$V6,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,44:$Va,47:$Vb,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},{1:[3]},{5:[1,39],6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:11,15:$V1,17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,30:$V3,31:$V4,32:$V5,33:$V6,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,44:$Va,47:$Vb,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},o($Vj,[2,2]),o($Vj,[2,4]),o($Vj,[2,5]),o($Vj,[2,6]),o($Vj,[2,7]),o($Vj,[2,8]),o($Vj,[2,9]),{14:41,15:[1,42]},o($Vj,[2,11]),{13:[1,43]},{11:44,15:$Vk,17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},o($Vl,[2,22],{86:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq}),o($Vl,[2,23]),o($Vl,[2,24]),o($Vl,[2,25]),o($Vl,[2,26]),o($Vj,[2,27]),o($Vj,[2,28]),{11:51,15:$Vk,17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},{26:[1,52]},o([5,13,15,18,22,30,31,32,33,37,38,40,44,47,48,50,52,84,85,86,87,88,89,90,91,92],$Vr,{16:$Vs,19:$Vt,26:$Vu}),o($Vv,[2,93]),o($Vv,[2,94]),o($Vv,[2,95]),o($Vv,[2,102]),o($Vv,[2,103]),o($Vl,[2,18]),{19:[1,56]},{15:$Vw,27:57,37:$V7,38:$V8,85:$Vg,91:$Vh,92:$Vi},{11:59,15:$Vk,17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},o($Vl,[2,39]),o($Vl,[2,40]),o($Vl,[2,41]),{11:76,15:$Vk,17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,35:$Vx,36:64,37:$V7,38:$V8,39:$Vy,40:$V9,41:33,42:34,43:35,48:$Vc,50:$Vd,51:60,52:$Ve,53:61,54:62,55:63,56:66,57:67,58:68,59:69,60:70,61:71,62:72,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,72:$VH,73:74,74:$VI,75:$VJ,78:$VK,79:$VL,80:$VM,82:$VN,83:$VO,84:$Vf,85:$Vg,91:$Vh,92:$Vi},{11:93,15:$Vk,17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,35:$VP,36:94,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,48:$Vc,49:92,50:$Vd,52:$Ve,82:$VN,83:$VO,84:$Vf,85:$Vg,91:$Vh,92:$Vi},{11:76,15:$Vk,17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,35:$Vx,36:64,37:$V7,38:$V8,39:$Vy,40:$V9,41:33,42:34,43:35,48:$Vc,50:$Vd,51:96,52:$Ve,53:61,54:62,55:63,56:66,57:67,58:68,59:69,60:70,61:71,62:72,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,72:$VH,73:74,74:$VI,75:$VJ,78:$VK,79:$VL,80:$VM,82:$VN,83:$VO,84:$Vf,85:$Vg,91:$Vh,92:$Vi},{1:[2,1]},o($Vj,[2,3]),o($Vj,[2,10]),o($Vj,[2,12],{16:$Vs}),{15:[1,97]},{4:98,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:11,15:$V1,17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,30:$V3,31:$V4,32:$V5,33:$V6,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,44:$Va,47:$Vb,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},o($Vv,$Vr,{19:$Vt,26:$Vu}),{15:$Vw,27:99,37:$V7,38:$V8,85:$Vg,91:$Vh,92:$Vi},{15:$Vw,27:100,37:$V7,38:$V8,85:$Vg,91:$Vh,92:$Vi},{15:$Vw,27:101,37:$V7,38:$V8,85:$Vg,91:$Vh,92:$Vi},{15:$Vw,27:102,37:$V7,38:$V8,85:$Vg,91:$Vh,92:$Vi},{15:$Vw,27:103,37:$V7,38:$V8,85:$Vg,91:$Vh,92:$Vi},o($Vj,[2,29]),{34:104,35:[1,105],37:[1,106],38:[1,107],39:[1,108]},{11:109,15:$Vk,17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},{11:112,15:$Vk,17:16,18:$V2,21:[1,111],23:15,24:110,25:29,27:14,28:17,29:18,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},{25:113,41:33,42:34,43:35,48:$Vc,50:$Vd,52:$Ve},{15:[1,116],20:114,21:[1,115]},o($Vl,[2,36],{86:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq}),o($Vv,$Vr),{45:[1,117]},{11:76,15:$Vk,17:16,18:$V2,22:[1,118],23:15,25:29,27:14,28:17,29:18,35:$Vx,36:64,37:$V7,38:$V8,39:$Vy,40:$V9,41:33,42:34,43:35,48:$Vc,50:$Vd,52:$Ve,53:119,54:62,55:63,56:66,57:67,58:68,59:69,60:70,61:71,62:72,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,72:$VH,73:74,74:$VI,75:$VJ,78:$VK,79:$VL,80:$VM,82:$VN,83:$VO,84:$Vf,85:$Vg,91:$Vh,92:$Vi},o($VQ,[2,50]),o($VQ,[2,52]),o($VQ,[2,53]),o($VQ,[2,54]),{15:$VR,35:$VP,36:120,82:$VN,83:$VO},o($VQ,[2,56]),o($VQ,[2,57]),o($VQ,[2,58]),o($VQ,[2,59]),o($VQ,[2,60]),o($VQ,[2,61]),o($VQ,[2,62]),o($VQ,[2,72]),o($VQ,[2,73]),{11:125,15:[1,123],17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,48:$Vc,50:$Vd,52:$Ve,72:[1,122],73:124,84:$Vf,85:$Vg,91:$Vh,92:$Vi},o($VQ,[2,86],{81:$VS}),{11:127,15:$Vk,17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},o($VT,[2,89]),o($VT,[2,90]),o($VQ,[2,63]),o($VQ,[2,64]),o($VQ,[2,65]),o($VQ,[2,66]),o($VQ,[2,67]),o($VQ,[2,68]),{11:128,15:$Vk,17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,35:$VP,36:129,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,48:$Vc,50:$Vd,52:$Ve,82:$VN,83:$VO,84:$Vf,85:$Vg,91:$Vh,92:$Vi},{11:130,15:$Vk,17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},{11:125,15:$Vk,17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,48:$Vc,50:$Vd,52:$Ve,73:131,84:$Vf,85:$Vg,91:$Vh,92:$Vi},{11:125,15:$Vk,17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,48:$Vc,50:$Vd,52:$Ve,73:132,84:$Vf,85:$Vg,91:$Vh,92:$Vi},{11:133,15:$Vk,17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},{35:$VP,36:134,82:$VN,83:$VO},{22:[1,135]},{22:[2,46]},{22:[2,47]},{15:$VR},{11:76,15:$Vk,17:16,18:$V2,22:[1,136],23:15,25:29,27:14,28:17,29:18,35:$Vx,36:64,37:$V7,38:$V8,39:$Vy,40:$V9,41:33,42:34,43:35,48:$Vc,50:$Vd,52:$Ve,53:119,54:62,55:63,56:66,57:67,58:68,59:69,60:70,61:71,62:72,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,72:$VH,73:74,74:$VI,75:$VJ,78:$VK,79:$VL,80:$VM,82:$VN,83:$VO,84:$Vf,85:$Vg,91:$Vh,92:$Vi},{16:[1,137]},{6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:11,15:$V1,17:16,18:$V2,22:[1,138],23:15,25:29,27:14,28:17,29:18,30:$V3,31:$V4,32:$V5,33:$V6,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,44:$Va,47:$Vb,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},o($VU,[2,97],{88:$Vo,89:$Vp,90:$Vq}),o($VU,[2,98],{88:$Vo,89:$Vp,90:$Vq}),o($VV,[2,99],{90:$Vq}),o($VV,[2,100],{90:$Vq}),o($Vv,[2,101]),{11:139,15:$Vk,17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},o($VW,[2,34],{36:140,35:$VP,82:$VN,83:$VO}),o($VW,[2,32]),o($VW,[2,33]),o($VW,[2,35]),o($Vj,[2,13]),{11:142,15:$Vk,17:16,18:$V2,21:[1,141],23:15,25:29,27:14,28:17,29:18,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},o($Vl,[2,17]),o($VX,[2,37]),o($Vl,[2,19]),{15:[1,144],21:[1,143]},{4:145,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:11,15:$V1,17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,30:$V3,31:$V4,32:$V5,33:$V6,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,44:$Va,47:$Vb,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},o($VY,[2,20]),{11:146,15:$Vk,17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},o($Vl,[2,48]),o($VQ,[2,51]),o($VQ,[2,55]),o($VT,[2,91]),o($VQ,[2,74]),o($VQ,[2,75],{19:$Vt,26:$Vu,81:$Vr,86:$Vr,87:$Vr,88:$Vr,89:$Vr,90:$Vr}),o($VQ,[2,76]),{81:$VS},{11:147,15:$Vk,17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},o($VQ,[2,87],{81:[1,148]}),{35:$VP,36:149,82:$VN,83:$VO},{11:150,15:$Vk,17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},o($VQ,[2,81]),o($VQ,[2,82]),o($VQ,[2,83]),o($VQ,[2,70],{71:[1,151]}),{11:152,15:$Vk,17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},o($Vl,[2,45]),o($Vl,[2,49]),{11:153,15:$Vk,17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},o($Vj,[2,44]),o($Vj,[2,30]),o($Vj,[2,31]),o($Vl,[2,16]),o($VX,[2,38]),{4:154,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:11,15:$V1,17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,30:$V3,31:$V4,32:$V5,33:$V6,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,44:$Va,47:$Vb,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},o($VY,[2,21]),{6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:11,15:$V1,17:16,18:$V2,22:[1,155],23:15,25:29,27:14,28:17,29:18,30:$V3,31:$V4,32:$V5,33:$V6,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,44:$Va,47:$Vb,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},o($Vl,[2,92]),o($VQ,[2,84],{81:[1,156]}),{11:157,15:$Vk,17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},o($VQ,[2,77]),o($VQ,[2,78]),{4:158,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:11,15:$V1,17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,30:$V3,31:$V4,32:$V5,33:$V6,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,44:$Va,47:$Vb,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},o($VQ,[2,69]),{45:[1,159]},{6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:11,15:$V1,17:16,18:$V2,22:[1,160],23:15,25:29,27:14,28:17,29:18,30:$V3,31:$V4,32:$V5,33:$V6,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,44:$Va,47:$Vb,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},o($Vl,[2,15]),{11:161,15:$Vk,17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},o($VQ,[2,88]),{6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:11,15:$V1,17:16,18:$V2,22:[1,162],23:15,25:29,27:14,28:17,29:18,30:$V3,31:$V4,32:$V5,33:$V6,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,44:$Va,47:$Vb,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},{11:163,15:$Vk,17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},o($Vl,[2,14]),o($VQ,[2,85]),o($VQ,[2,71]),{4:164,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:11,15:$V1,17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,30:$V3,31:$V4,32:$V5,33:$V6,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,44:$Va,46:[1,165],47:$Vb,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},{6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:11,15:$V1,17:16,18:$V2,22:[1,166],23:15,25:29,27:14,28:17,29:18,30:$V3,31:$V4,32:$V5,33:$V6,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,44:$Va,47:$Vb,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},{11:167,15:$Vk,17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},o($Vj,[2,42]),{4:168,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:11,15:$V1,17:16,18:$V2,23:15,25:29,27:14,28:17,29:18,30:$V3,31:$V4,32:$V5,33:$V6,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,44:$Va,47:$Vb,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},{6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:11,15:$V1,17:16,18:$V2,22:[1,169],23:15,25:29,27:14,28:17,29:18,30:$V3,31:$V4,32:$V5,33:$V6,37:$V7,38:$V8,40:$V9,41:33,42:34,43:35,44:$Va,47:$Vb,48:$Vc,50:$Vd,52:$Ve,84:$Vf,85:$Vg,91:$Vh,92:$Vi},o($Vj,[2,43])],
defaultActions: {39:[2,1],93:[2,46],94:[2,47]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 22;
break;
case 2:return 81;
break;
case 3:return 'delimiter_list';
break;
case 4:return 16;
break;
case 5:return 44;
break;
case 6:return 45;
break;
case 7:return 46;
break;
case 8:return 13;
break;
case 9:return 18;
break;
case 10:return 40;
break;
case 11:return 47;
break;
case 12:return 'elseif_keyword';
break;
case 13:return 'else_keyword';
break;
case 14:return 71;
break;
case 15:return 85;
break;
case 16:return 26;
break;
case 17:return 88;
break;
case 18:return 89;
break;
case 19:return 87;
break;
case 20:return 86;
break;
case 21:return 90;
break;
case 22:return 19;
break;
case 23:return 21;
break;
case 24:return 92;
break;
case 25:return 91;
break;
case 26:return 82;
break;
case 27:return 83;
break;
case 28:return 84;
break;
case 29:return 35;
break;
case 30:return 48;
break;
case 31:return 50;
break;
case 32:return 52;
break;
case 33:return 31;
break;
case 34:return 30;
break;
case 35:return 32;
break;
case 36:return 33;
break;
case 37:return 74;
break;
case 38:return 39;
break;
case 39:return 35;
break;
case 40:return 75;
break;
case 41:return 78;
break;
case 42:return 79;
break;
case 43:return 80;
break;
case 44:return 70;
break;
case 45:return 72;
break;
case 46:return 37;
break;
case 47:return 38;
break;
case 48:return 63;
break;
case 49:return 64;
break;
case 50:return 67;
break;
case 51:return 68;
break;
case 52:return 65;
break;
case 53:return 66;
break;
case 54:return 69;
break;
case 55:return 15;
break;
case 56:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:end\b)/,/^(?::)/,/^(?:,)/,/^(?:=)/,/^(?:for\b)/,/^(?:to\b)/,/^(?:by\b)/,/^(?:var\b)/,/^(?:fn\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else if\b)/,/^(?:else\b)/,/^(?:then\b)/,/^(?:-?(?:\d*\.)?\d+)/,/^(?:\.)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:\()/,/^(?:\))/,/^(?:PI\b)/,/^(?:E\b)/,/^(?:(red|blue|black|white))/,/^(?:random color\b)/,/^(?:random\b)/,/^(?:color\b)/,/^(?:alert\b)/,/^(?:add\b)/,/^(?:set\b)/,/^(?:draw\b)/,/^(?:clear\b)/,/^(?:onresize\b)/,/^(?:obj\b)/,/^(?:pos\b)/,/^(?:size\b)/,/^(?:color\b)/,/^(?:outline\b)/,/^(?:alpha\b)/,/^(?:vel\b)/,/^(?:acc\b)/,/^(?:shrink\b)/,/^(?:center\b)/,/^(?:width\b)/,/^(?:height\b)/,/^(?:o\b)/,/^(?:x\b)/,/^(?:square\b)/,/^(?:rectangle\b)/,/^(?:circle\b)/,/^(?:ellipse\b)/,/^(?:grid\b)/,/^(?:[a-zA-Z]+)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}