/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,18],$V2=[1,25],$V3=[1,26],$V4=[1,11],$V5=[1,12],$V6=[1,32],$V7=[1,31],$V8=[1,33],$V9=[1,27],$Va=[1,19],$Vb=[1,20],$Vc=[1,21],$Vd=[1,22],$Ve=[1,23],$Vf=[5,12,14,17,21,29,33,35,36,39,41,75,76,77,78,84,85],$Vg=[1,40],$Vh=[5,12,14,17,20,21,29,33,34,35,36,39,41,45,53,54,55,56,57,58,59,60,61,62,64,65,68,69,70,71,72,73,74,75,76,77,78,84,85],$Vi=[1,41],$Vj=[1,42],$Vk=[1,43],$Vl=[1,44],$Vm=[1,45],$Vn=[2,83],$Vo=[1,46],$Vp=[1,47],$Vq=[1,48],$Vr=[5,12,14,17,20,21,29,33,34,35,36,39,41,45,53,54,55,56,57,58,59,60,61,62,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],$Vs=[1,51],$Vt=[1,58],$Vu=[1,73],$Vv=[1,74],$Vw=[1,75],$Vx=[1,76],$Vy=[1,77],$Vz=[1,78],$VA=[1,84],$VB=[1,83],$VC=[1,66],$VD=[1,68],$VE=[1,79],$VF=[1,80],$VG=[1,81],$VH=[1,82],$VI=[1,70],$VJ=[1,71],$VK=[1,72],$VL=[1,88],$VM=[14,17,21,29,36,39,41,45,53,54,55,56,57,58,59,60,62,64,65,68,69,70,72,73,74,75,76,77,78,84,85],$VN=[1,107],$VO=[1,112],$VP=[5,12,14,17,20,21,29,33,34,35,36,39,41,45,53,54,55,56,57,58,59,60,61,62,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,84,85],$VQ=[5,12,14,17,20,21,29,33,34,35,36,39,41,45,53,54,55,56,57,58,59,60,61,62,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85],$VR=[14,17,20,29,36,39,41,75,76,77,78,84,85],$VS=[14,20];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"iioscript":3,"statements":4,"eof":5,"statement":6,"definition":7,"declaration":8,"for_statement":9,"if_statement":10,"expression":11,"var_keyword":12,"assignment":13,"variable":14,"assign":15,"anon_fn":16,"fn_keyword":17,"(":18,"variables":19,")":20,"end":21,"fn_call":22,"expressions":23,"iio_fn":24,"dot":25,"value":26,"return":27,"random_property":28,"return_keyword":29,"add_fn":30,"alert_fn":31,"set_fn":32,"for_keyword":33,"to_keyword":34,"if_keyword":35,"alert":36,"alertparam":37,"color_property":38,"add":39,"genparams":40,"set":41,"genparam":42,"position_property":43,"size_property":44,"color_keyword":45,"type":46,"outline_property":47,"alpha_property":48,"vel_property":49,"acc_property":50,"shrink_property":51,"grid_property":52,"type_circ":53,"type_x":54,"type_circle":55,"type_ellipse":56,"type_square":57,"type_rectangle":58,"type_grid":59,"shrink_keyword":60,"then_keyword":61,"center":62,"vector":63,"pos_keyword":64,"outline_keyword":65,"outline_params":66,"outline_param":67,"alpha_keyword":68,"vel_keyword":69,"acc_keyword":70,"delimiter_vector":71,"size_keyword":72,"color_constant":73,"color_random":74,"random_keyword":75,"number":76,"width":77,"height":78,"+":79,"-":80,"*":81,"/":82,"^":83,"E":84,"PI":85,"$accept":0,"$end":1},
terminals_: {2:"error",5:"eof",12:"var_keyword",14:"variable",15:"assign",17:"fn_keyword",18:"(",20:")",21:"end",25:"dot",29:"return_keyword",33:"for_keyword",34:"to_keyword",35:"if_keyword",36:"alert",39:"add",41:"set",45:"color_keyword",53:"type_circ",54:"type_x",55:"type_circle",56:"type_ellipse",57:"type_square",58:"type_rectangle",59:"type_grid",60:"shrink_keyword",61:"then_keyword",62:"center",64:"pos_keyword",65:"outline_keyword",67:"outline_param",68:"alpha_keyword",69:"vel_keyword",70:"acc_keyword",71:"delimiter_vector",72:"size_keyword",73:"color_constant",74:"color_random",75:"random_keyword",76:"number",77:"width",78:"height",79:"+",80:"-",81:"*",82:"/",83:"^",84:"E",85:"PI"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,1],[6,1],[6,1],[6,1],[7,2],[7,1],[8,2],[13,3],[16,6],[22,4],[22,1],[22,3],[19,1],[19,2],[11,1],[11,1],[11,1],[11,1],[11,1],[27,2],[23,1],[23,2],[24,1],[24,1],[24,1],[9,9],[10,4],[31,3],[37,1],[37,1],[30,3],[32,3],[40,1],[40,2],[42,1],[42,1],[42,1],[42,2],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[52,3],[51,2],[51,5],[43,1],[43,1],[43,2],[43,2],[43,2],[47,3],[47,3],[66,1],[66,1],[48,2],[49,2],[50,2],[63,3],[63,5],[44,1],[44,2],[44,4],[38,1],[38,1],[38,2],[28,4],[26,1],[26,1],[26,1],[26,1],[26,3],[26,3],[26,3],[26,3],[26,3],[26,1],[26,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return "(function() { \n\treturn function(app, settings) {\n\n" + $$[$0-1] + "\t}\n})()" 
break;
case 2:
this.$ = "\t\t"+$$[$0];
break;
case 3:
this.$ = $$[$0-1] + $$[$0];
break;
case 4: case 5: case 6: case 7: case 8: case 27: case 28: case 29: case 62: case 63:
this.$ = $$[$0];
break;
case 9:
this.$ = 'var ' + $$[$0] + '\n' 
break;
case 10:
this.$ = $$[$0] + '\n'
break;
case 11:
this.$ = 'var ' + $$[$0] + ';\n' 
break;
case 12:
this.$ = $$[$0-2] + ' = ' + $$[$0] + ';' 
break;
case 13:
this.$ = 'function(' + $$[$0-3] + '){ \n' + $$[$0-1] + '\n\t}\n' 
break;
case 14:
this.$ = '\t\t' + $$[$0-3] + '(' +$$[$0-1] + ');\n' 
break;
case 15:
this.$ = 'app.' + $$[$0]
break;
case 16:
this.$ = $$[$0-2] + '.' + $$[$0]
break;
case 17: case 19: case 20: case 21: case 22: case 23: case 25: case 34: case 37: case 60: case 69: case 70: case 80: case 83:
this.$ = $$[$0]
break;
case 18: case 26:
this.$ = $$[$0-1] + ", " + $$[$0]
break;
case 24:
this.$ = "\t\treturn " + $$[$0]
break;
case 30:
this.$ = '\t\tfor(var ' + $$[$0-6] + ' = ' + $$[$0-4] + '; '+$$[$0-6]+'<'+$$[$0-2]+';'+$$[$0-6]+'++) {\n' + $$[$0-1] + '\t\t}\n'
break;
case 31:
this.$ = "\t\tif(" + $$[$0-2] + "){\n" + $$[$0-1] + "\t\t}\n"
break;
case 32:
this.$ = "alert(" + $$[$0-1] + " );\n" 
break;
case 33: case 40: case 44: case 47: case 48: case 49: case 66: case 67: case 68: case 78:
this.$ = $$[$0] 
break;
case 35:
this.$ = "add({\n\t\t\t" + $$[$0-1] + "\n\t\t});\n\n" 
break;
case 36:
this.$ = "set({\n\t\t\t" + $$[$0-1] + "\n\t\t});\n\n" 
break;
case 38:
this.$ = $$[$0-1] + ",\n\t\t\t" + $$[$0] 
break;
case 39:
this.$ = "pos: " + $$[$0] 
break;
case 41: case 42:
this.$ = "color: " + $$[$0] 
break;
case 43:
this.$ = "type: " + $$[$0] 
break;
case 45:
this.$ = "alpha: " + $$[$0] 
break;
case 46:
this.$ = "vel: " + $$[$0] 
break;
case 50: case 52: case 53:
this.$ = "iio.CIRC" 
break;
case 51:
this.$ = "iio.X" 
break;
case 54: case 55:
this.$ = "iio.RECT" 
break;
case 56:
this.$ = "type:iio.GRID,\n\t\t\tgridColor:" + $$[$0-1] + ",\n\t\t\tC: " + $$[$0] + ",\n\t\t\tR: " + $$[$0] 
break;
case 57:
this.$ = "shrink:[" + $$[$0] + "\t\t\t]" 
break;
case 58:
this.$ = "shrink:[" + $$[$0-3] + ",function(o){" + $$[$0-1] + "\t\t\t}]" 
break;
case 59: case 61:
this.$ = "app.center"
break;
case 64:
this.$ = "lineWidth: "+$$[$0-1]+", outline: "+$$[$0] 
break;
case 65:
this.$ = "outline: "+$$[$0-1]+", lineWidth: "+$$[$0] 
break;
case 71:
this.$ = '{ x: ' + $$[$0-2] + ', y: ' + $$[$0] + '}' 
break;
case 72:
this.$ = '{ x: ' + $$[$0-4] + ', y: ' + $$[$0-2] + ', r:' + $$[$0] + '}'
break;
case 73: case 74:
this.$ = "width: " + $$[$0] 
break;
case 75:
this.$ = "width: " + $$[$0-2]+ ", height: " + $$[$0] 
break;
case 76:
this.$ = "'" + $$[$0] + "'" 
break;
case 77:
this.$ = "iio.random.color()" 
break;
case 79:
this.$ = "iio.random.num("+$$[$0-2]+","+$$[$0]+")" 
break;
case 81:
this.$ = "app.width"
break;
case 82:
this.$ = "app.height"
break;
case 84:
this.$ = $$[$0-2] + '+' + $$[$0];
break;
case 85:
this.$ = $$[$0-2] + '-' + $$[$0];
break;
case 86:
this.$ = $$[$0-2] + '*' + $$[$0];
break;
case 87:
this.$ = $$[$0-2] + '/' + $$[$0];
break;
case 88:
this.$ = 'Math.pow('+ $$[$0-2] + ',' + $$[$0] + ')' 
break;
case 89:
this.$ = 'Math.E' 
break;
case 90:
this.$ = 'Math.PI' 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:$V1,16:15,17:$V2,22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,33:$V4,35:$V5,36:$V6,39:$V7,41:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},{1:[3]},{5:[1,34],6:35,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:$V1,16:15,17:$V2,22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,33:$V4,35:$V5,36:$V6,39:$V7,41:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},o($Vf,[2,2]),o($Vf,[2,4]),o($Vf,[2,5]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),{13:36,14:[1,37]},o($Vf,[2,10]),{12:[1,38]},{11:39,14:$Vg,16:15,17:$V2,22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,36:$V6,39:$V7,41:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},o($Vh,[2,19],{79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm}),o($Vh,[2,20]),o($Vh,[2,21]),o($Vh,[2,22]),o($Vh,[2,23]),o([5,12,14,17,21,29,33,35,36,39,41,75,76,77,78,79,80,81,82,83,84,85],$Vn,{15:$Vo,18:$Vp,25:$Vq}),o($Vr,[2,80]),o($Vr,[2,81]),o($Vr,[2,82]),o($Vr,[2,89]),o($Vr,[2,90]),o($Vh,[2,15]),{18:[1,49]},{14:$Vs,26:50,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},{11:52,14:$Vg,16:15,17:$V2,22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,36:$V6,39:$V7,41:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},o($Vh,[2,27]),o($Vh,[2,28]),o($Vh,[2,29]),{11:69,14:$Vg,16:15,17:$V2,22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,36:$V6,38:57,39:$V7,40:53,41:$V8,42:54,43:55,44:56,45:$Vt,46:59,47:60,48:61,49:62,50:63,51:64,52:65,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,62:$VC,63:67,64:$VD,65:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},{11:86,14:$Vg,16:15,17:$V2,22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,36:$V6,37:85,38:87,39:$V7,41:$V8,45:$VL,73:$VJ,74:$VK,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},{11:69,14:$Vg,16:15,17:$V2,22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,36:$V6,38:57,39:$V7,40:89,41:$V8,42:54,43:55,44:56,45:$Vt,46:59,47:60,48:61,49:62,50:63,51:64,52:65,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,62:$VC,63:67,64:$VD,65:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},{1:[2,1]},o($Vf,[2,3]),o($Vf,[2,9]),o($Vf,[2,11],{15:$Vo}),{14:[1,90]},{4:91,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:$V1,16:15,17:$V2,22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,33:$V4,35:$V5,36:$V6,39:$V7,41:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},o($Vr,$Vn,{18:$Vp,25:$Vq}),{14:$Vs,26:92,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},{14:$Vs,26:93,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},{14:$Vs,26:94,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},{14:$Vs,26:95,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},{14:$Vs,26:96,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},{11:97,14:$Vg,16:15,17:$V2,22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,36:$V6,39:$V7,41:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},{11:99,14:$Vg,16:15,17:$V2,22:14,23:98,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,36:$V6,39:$V7,41:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},{24:100,30:28,31:29,32:30,36:$V6,39:$V7,41:$V8},{14:[1,102],19:101},o($Vh,[2,24],{79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm}),o($Vr,$Vn),{34:[1,103]},{11:69,14:$Vg,16:15,17:$V2,21:[1,104],22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,36:$V6,38:57,39:$V7,41:$V8,42:105,43:55,44:56,45:$Vt,46:59,47:60,48:61,49:62,50:63,51:64,52:65,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,62:$VC,63:67,64:$VD,65:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},o($VM,[2,37]),o($VM,[2,39]),o($VM,[2,40]),o($VM,[2,41]),{14:$VN,38:106,45:$VL,73:$VJ,74:$VK},o($VM,[2,43]),o($VM,[2,44]),o($VM,[2,45]),o($VM,[2,46]),o($VM,[2,47]),o($VM,[2,48]),o($VM,[2,49]),o($VM,[2,59]),o($VM,[2,60]),{11:111,14:[1,109],16:15,17:$V2,22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,36:$V6,39:$V7,41:$V8,62:[1,108],63:110,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},o($VM,[2,73],{71:$VO}),{11:113,14:$Vg,16:15,17:$V2,22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,36:$V6,39:$V7,41:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},o($VM,[2,76]),o($VM,[2,77]),o($VM,[2,50]),o($VM,[2,51]),o($VM,[2,52]),o($VM,[2,53]),o($VM,[2,54]),o($VM,[2,55]),{11:114,14:$Vg,16:15,17:$V2,22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,36:$V6,38:115,39:$V7,41:$V8,45:$VL,73:$VJ,74:$VK,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},{11:116,14:$Vg,16:15,17:$V2,22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,36:$V6,39:$V7,41:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},{11:111,14:$Vg,16:15,17:$V2,22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,36:$V6,39:$V7,41:$V8,63:117,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},{11:111,14:$Vg,16:15,17:$V2,22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,36:$V6,39:$V7,41:$V8,63:118,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},{11:119,14:$Vg,16:15,17:$V2,22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,36:$V6,39:$V7,41:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},{38:120,45:$VL,73:$VJ,74:$VK},{21:[1,121]},{21:[2,33]},{21:[2,34]},{14:$VN},{11:69,14:$Vg,16:15,17:$V2,21:[1,122],22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,36:$V6,38:57,39:$V7,41:$V8,42:105,43:55,44:56,45:$Vt,46:59,47:60,48:61,49:62,50:63,51:64,52:65,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,62:$VC,63:67,64:$VD,65:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},{15:[1,123]},{6:35,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:$V1,16:15,17:$V2,21:[1,124],22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,33:$V4,35:$V5,36:$V6,39:$V7,41:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},o($VP,[2,84],{81:$Vk,82:$Vl,83:$Vm}),o($VP,[2,85],{81:$Vk,82:$Vl,83:$Vm}),o($VQ,[2,86],{83:$Vm}),o($VQ,[2,87],{83:$Vm}),o($Vr,[2,88]),o($Vf,[2,12]),{11:126,14:$Vg,16:15,17:$V2,20:[1,125],22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,36:$V6,39:$V7,41:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},o($VR,[2,25]),o($Vh,[2,16]),{14:[1,128],20:[1,127]},o($VS,[2,17]),{11:129,14:$Vg,16:15,17:$V2,22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,36:$V6,39:$V7,41:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},o($Vh,[2,35]),o($VM,[2,38]),o($VM,[2,42]),o($VM,[2,78]),o($VM,[2,61]),o($VM,[2,62],{18:$Vp,25:$Vq,71:$Vn,79:$Vn,80:$Vn,81:$Vn,82:$Vn,83:$Vn}),o($VM,[2,63]),{71:$VO},{11:130,14:$Vg,16:15,17:$V2,22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,36:$V6,39:$V7,41:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},o($VM,[2,74],{71:[1,131]}),{38:132,45:$VL,73:$VJ,74:$VK},{11:133,14:$Vg,16:15,17:$V2,22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,36:$V6,39:$V7,41:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},o($VM,[2,68]),o($VM,[2,69]),o($VM,[2,70]),o($VM,[2,57],{61:[1,134]}),{11:135,14:$Vg,16:15,17:$V2,22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,36:$V6,39:$V7,41:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},o($Vh,[2,32]),o($Vh,[2,36]),{11:136,14:$Vg,16:15,17:$V2,22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,36:$V6,39:$V7,41:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},o($Vf,[2,31]),o($Vh,[2,14]),o($VR,[2,26]),{4:137,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:$V1,16:15,17:$V2,22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,33:$V4,35:$V5,36:$V6,39:$V7,41:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},o($VS,[2,18]),o($Vh,[2,79]),o($VM,[2,71],{71:[1,138]}),{11:139,14:$Vg,16:15,17:$V2,22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,36:$V6,39:$V7,41:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},o($VM,[2,64]),o($VM,[2,65]),{4:140,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:$V1,16:15,17:$V2,22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,33:$V4,35:$V5,36:$V6,39:$V7,41:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},o($VM,[2,56]),{34:[1,141]},{6:35,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:$V1,16:15,17:$V2,21:[1,142],22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,33:$V4,35:$V5,36:$V6,39:$V7,41:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},{11:143,14:$Vg,16:15,17:$V2,22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,36:$V6,39:$V7,41:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},o($VM,[2,75]),{6:35,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:$V1,16:15,17:$V2,21:[1,144],22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,33:$V4,35:$V5,36:$V6,39:$V7,41:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},{11:145,14:$Vg,16:15,17:$V2,22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,36:$V6,39:$V7,41:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},o($Vh,[2,13]),o($VM,[2,72]),o($VM,[2,58]),{4:146,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:$V1,16:15,17:$V2,22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,33:$V4,35:$V5,36:$V6,39:$V7,41:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},{6:35,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:$V1,16:15,17:$V2,21:[1,147],22:14,24:24,26:13,27:16,28:17,29:$V3,30:28,31:29,32:30,33:$V4,35:$V5,36:$V6,39:$V7,41:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,84:$Vd,85:$Ve},o($Vf,[2,30])],
defaultActions: {34:[2,1],86:[2,33],87:[2,34]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 21;
break;
case 2:return 71;
break;
case 3:return 'delimiter_list';
break;
case 4:return 15;
break;
case 5:return 33;
break;
case 6:return 34;
break;
case 7:return 12;
break;
case 8:return 17;
break;
case 9:return 29;
break;
case 10:return 35;
break;
case 11:return 'elseif_keyword';
break;
case 12:return 'else_keyword';
break;
case 13:return 61;
break;
case 14:return 76;
break;
case 15:return 25;
break;
case 16:return 81;
break;
case 17:return 82;
break;
case 18:return 80;
break;
case 19:return 79;
break;
case 20:return 83;
break;
case 21:return 18;
break;
case 22:return 20;
break;
case 23:return 85;
break;
case 24:return 84;
break;
case 25:return 73;
break;
case 26:return 74;
break;
case 27:return 75;
break;
case 28:return 45;
break;
case 29:return 36;
break;
case 30:return 39;
break;
case 31:return 41;
break;
case 32:return 64;
break;
case 33:return 72;
break;
case 34:return 45;
break;
case 35:return 65;
break;
case 36:return 68;
break;
case 37:return 69;
break;
case 38:return 70;
break;
case 39:return 60;
break;
case 40:return 62;
break;
case 41:return 77;
break;
case 42:return 78;
break;
case 43:return 53;
break;
case 44:return 54;
break;
case 45:return 57;
break;
case 46:return 58;
break;
case 47:return 55;
break;
case 48:return 56;
break;
case 49:return 59;
break;
case 50:return 14;
break;
case 51:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:end\b)/,/^(?::)/,/^(?:,)/,/^(?:=)/,/^(?:for\b)/,/^(?:to\b)/,/^(?:var\b)/,/^(?:fn\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else if\b)/,/^(?:else\b)/,/^(?:then\b)/,/^(?:-?(?:\d*\.)?\d+)/,/^(?:\.)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:\()/,/^(?:\))/,/^(?:PI\b)/,/^(?:E\b)/,/^(?:(red|blue))/,/^(?:random color\b)/,/^(?:random\b)/,/^(?:color\b)/,/^(?:alert\b)/,/^(?:add\b)/,/^(?:set\b)/,/^(?:pos\b)/,/^(?:size\b)/,/^(?:color\b)/,/^(?:outline\b)/,/^(?:alpha\b)/,/^(?:vel\b)/,/^(?:acc\b)/,/^(?:shrink\b)/,/^(?:center\b)/,/^(?:width\b)/,/^(?:height\b)/,/^(?:o\b)/,/^(?:x\b)/,/^(?:square\b)/,/^(?:rectangle\b)/,/^(?:circle\b)/,/^(?:ellipse\b)/,/^(?:grid\b)/,/^(?:[a-zA-Z]+)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}