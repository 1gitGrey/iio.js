<!DOCTYPE html>
<html>
	<body>
		<script type="text/javascript" src="iioEngine-1.3.js"></script>
		<script src="http://code.jquery.com/jquery-latest.min.js"
        type="text/javascript"></script>
		<script type="text/javascript">
			App=function(app,s){

				//SAVE TRIGGER
				var SAVE_DATA = false;

				var bgColor = s.color;
				app.setBGColor(bgColor);

				//TEST states
				var SESSION_ID=0;
				var SESSION_I=1;
				var SESSION_II=2;
				var state = SESSION_ID;

				//Constants
				var LEFT = 0;
				var RIGHT = 1;
				var NOCHOICE = 2;

				//Session vars
				var sessionID;
				var NUM_TRIALS = 2;
				var NUM_BLOCKS = 3;
				var trial = 0;
				var block = 0;
				var DATA;
				var choices = [];
				/*DATA.choices=[];
				DATA.answers=[];
				DATA.probLeft=[];
				DATA.probRight=[];
				DATA.reward=[];*/
				var choice=NOCHOICE;
				var bgTimer;

				//Time vars (in ms)
				var startDelay = 2000;
				var fixMinTime = 400;
				var fixMaxTime = 800;
				var fixationTime;
				var fixReadyTime = 2000;
				var choiceDuration = 3000;
				var choiceDelay = 500;
				var responseTime = choiceDuration;
				var resultTime = 2000;
				var extraTime = 3000;

				//Program Objects
				var fixationPoint;
				var progressBar;
				var barOutline;
				var prompt;
				var acceptInput=false;
				var shapes = [];
				var shapeKeys = [];

				//Image vars
				var randomNums = [];
				var imgs = [];
				var NUM_SHAPES = 1;
				var arrowImg;

				//Disposable Program Objects
				var ts={};
				reset = function(){
			    	window.removeEventListener('keydown',ts['keydown']);
			    	window.removeEventListener('keyup',ts['keyup']);
					for(var o in ts){
						if(ts[o] instanceof Array)
							for(var q in ts[o]){
								if(ts[o][q].selectCircle)
									app.rmv(ts[o][q].selectCircle);
								app.rmv(ts[o][q]);
							}
						else
							app.rmv(ts[o]);
					}
					progressBar.display=false;
					barOutline.display=false;
					progressBar.width = 1;
					progressBar.pos.x=app.center.x-299;
					progressBar.styles.fillStyle = 'white';
					acceptInput=false;
					init();
					console.log(app.cnvs[0].objs);
				}

				//Display constants
				var targetRadius = 24;
				var SHAPE_SIZE=35;
				var yOffset = app.height/8;

				initConstants = function(){
					fixationPoint = app.add([app.center.x,app.center.y-yOffset],{
						radius:8,
						color:'white',
						color2:'yellow',
						styles:{fillStyle:bgColor}
					})
					barOutline = app.add([app.center.x,app.height-100],{
						width:600,
						height:50,
						display:false,
						styles:{strokeStyle:'white',lineWidth:2}
					})
					progressBar = app.add([app.center.x-299,app.height-100],{
						width:1,
						height:48,
						display:false,
						styles:{fillStyle:'white'}
					})
					prompt = app.add('',[app.center.x,app.center.y-yOffset],{
						font:'30px Helvetica',
						textAlign:'center',
						styles:{fillStyle:'white'}
					});
				}; initConstants();
					console.log(app.cnvs[0].objs);


				initImages = function(){

					/*var r = 0;
					var notClear = false;
					while(randomNums.length<NUM_SHAPES){
						r = iio.randomInt(1,11);
						notClear = false;
						for(var j=0;j<randomNums.length;j++)
							if(r==randomNums[j])
								notClear=true;
						if(!notClear)
							randomNums[randomNums.length]=r;
					}*/

					for(var i=1;i<11;i++){
						imgs[i] = new Image();
						imgs[i].src = 'img/symbol_'+i+'.jpg';
					}
					arrowImg=new Image();
					arrowImg.src = 'img/arrow.png';			
				}; initImages();

				loadJSON=function(path, success, error){
			       var xhr = new XMLHttpRequest();
			       xhr.onreadystatechange = function(){
			           if (xhr.readyState === 4) {
			               if (xhr.status === 200) {
			                   if (success){
			                     DATA = JSON.parse(xhr.responseText);
			                     console.log(DATA);
			                     initDATA(0);
			                 }
			               } else if (error)
			                       error(xhr); 
			           }
			       };
			       xhr.open("GET", path, true);
			       xhr.send();
			   	}; loadJSON('data.json',function(data){},function(xhr){});

				initDATA=function(i){
					NUM_SHAPES = DATA[i].nSymbols;
					NUM_TRIALS = DATA[i].nTrialsPB;
				}
				
				init = function(){
					switch(state){
						case SESSION_ID:
							ts['input'] = app.add('',[app.center.x+10,app.center.y-yOffset],{
								font:'30px Helvetica',
								textAlign:'left',
								styles:{fillStyle:'white'}
							});
							ts['prompt'] = app.add('Enter a Session ID:',[app.center.x,app.center.y-yOffset],{
								font:'30px Helvetica',
								textAlign:'right',
								styles:{fillStyle:'white'}
							})
							ts['cursor'] = app.add([ts['input'].right(),ts['input'].top()-4,ts['input'].right(),ts['input'].bottom()],{
									styles:{
										lineWidth:2,
										strokeStyle:'white'
									}
								});
							ts['toggle'] = false;
							app.loop(2,function(){
								if(ts['toggle']) ts['cursor'].styles.strokeStyle='transparent';
								else ts['cursor'].styles.strokeStyle='white';
								ts['toggle']=!ts['toggle'];
								app.draw();
							});
							ts['cIndex'] = 0;
							ts['shift'] = false;
							ts['keydown'] = function(e){
								var keyString=iio.getKeyString(e);
								if(keyString!='f12')
									e.preventDefault();
							    if (keyString=='enter'&&ts['input'].text.length>0){
							    	window.clearTimeout(app.loops[0]);
							    	sessionID=ts['input'].text;
							    	state=SESSION_I;
							    	reset();
								} else {
								    if (keyString=='shift'){
								      ts['shift']=true; return;
								    }
								    ts['cIndex']=ts['input'].keyboardEdit(e,ts['cIndex'],ts['shift']);
								    if (keyString=='left arrow' && ts['cIndex']>0) 
								      ts['cIndex']--;
								    else if (keyString=='right arrow' && ts['cIndex']<ts['input'].text.length)
								      ts['cIndex']++;
								    var x=ts['input'].getX(ts['cIndex']);
								    ts['cursor'].pos.x=ts['cursor'].endPos.x=x;
									app.draw();
								}
							}

							ts['keyup'] = function(e){
								if (iio.keyCodeIs('shift',e)) ts['shift']=false;
							};
							window.addEventListener('keydown',ts['keydown'],false);
							window.addEventListener('keyup',ts['keyup'],false);
							app.draw();
							break;
						case SESSION_I:
							ts['target']=[];
							ts['target'][0] = app.add([app.width/5,app.center.y-yOffset],{
								radius:targetRadius,
								display:false,
								styles:{fillStyle:'blue'}
							});
							ts['target'][1] = app.add([app.width-app.width/5,app.center.y-yOffset],{
								radius:targetRadius,
								display:false,
								styles:{fillStyle:'green'}
							});
							display_instructions();
							prompt.display=true;
							ts['keydown']=function(e){
								if(acceptInput){
								    var keyString=iio.getKeyString(e);
								    if (keyString=='f') 
								    	pickTarget(LEFT);
								    else if (keyString=='j')
								    	pickTarget(RIGHT);
								}
							}
							window.addEventListener('keydown',ts['keydown'],false);
							break;
						case SESSION_II:
							var style={
								font:'20px Helvetica',
								textAlign:'center',
								styles:{fillStyle:'white'}
							};
							ts['arrow'] = app.add([app.center.x,app.center.y-yOffset],{img:arrowImg,display:false});
							ts['percent']=[];
							ts['percent'][0] = app.add('< 10%',[app.center.x-4.5*app.width/10,app.height/7*5],style);
							ts['percent'][0].selectCircle = app.add([ts['percent'][0].pos.x,ts['percent'][0].pos.y+20],{
								radius:5,
								styles:{fillStyle:'white'}
							});
							for(var i=1;i<9;i++){
								ts['percent'][i] = app.add(i+'0%-'+(1+i)+'0%',[app.center.x-(4.5-i)*app.width/10,app.height/7*5],style);
								ts['percent'][i].selectCircle = app.add([ts['percent'][i].pos.x,ts['percent'][i].pos.y+20],{
									radius:5,
									styles:{fillStyle:'white'}
								});
							}
							ts['percent'][9] = app.add('90% <',[app.center.x+4.5*app.width/10,app.height/7*5],style);
							ts['percent'][9].selectCircle = app.add([ts['percent'][9].pos.x,ts['percent'][9].pos.y+20],{
								radius:5,
								styles:{fillStyle:'white'}
							});
							ts['target']=[];
							ts['target'][0] = app.add([app.width/3,app.center.y-yOffset],{
								radius:targetRadius,
								display:false,
								styles:{fillStyle:'green'}
							});
							display_instructions();
							ts['keydown'] = function(e){
								if(acceptInput){
									var keyString=iio.getKeyString(e);
								    if (keyString=='a') selectPercentage(0);
								    else if (keyString=='s') selectPercentage(1);
								    else if (keyString=='d') selectPercentage(2);
								    else if (keyString=='f') selectPercentage(3);
								    else if (keyString=='g') selectPercentage(4);
								    else if (keyString=='h') selectPercentage(5);
								    else if (keyString=='j') selectPercentage(6);
								    else if (keyString=='k') selectPercentage(7);
								    else if (keyString=='l') selectPercentage(8);
								    else if (keyString=='semi-colon') selectPercentage(9);
								}
							}
							window.addEventListener('keydown',ts['keydown'],false); 
							break;
						default: 
							block++;
							if(block<NUM_BLOCKS){
								state=SESSION_I;
								initDATA(block);
								reset();
							} else {
								prompt.pos.y = app.center.y-yOffset;
								prompt.text = 'Experiment Concluded';
								app.draw();
							}
					}
				}; 

				endTrial = function(){
					choices[choices.length]=choice;
					display_results();
					trial++;
					setTimeout(function(){
						display_clear();
						if(trial==NUM_TRIALS){
							display_fixationPoint();
							if(progressBar.width>600){
								progressBar.width = 1;
								progressBar.pos.x=app.center.x-299	
								progressBar.styles.fillStyle = 'white';
							}
						}
						else {
							state++;
							reset();
						}
					},resultTime);
				}

				pickTarget = function(c){
					choice=c;
					acceptInput=false;
					clearTimeout(bgTimer);
					setTimeout(function(){
						ts['highlight'] = app.add(ts['target'][c].pos,{
							radius:targetRadius+10,
							styles:{strokeStyle:'white',lineWidth:2}
						});
						endTrial();
					},choiceDelay);
				}

				selectPercentage = function(n){
					for(var i=0;i<ts['percent'].length;i++)
						ts['percent'][i].selectCircle.styles.fillStyle = 'white';
					choice = n;
			    	ts['percent'][n].selectCircle.styles.fillStyle = 'yellow';
			    	app.draw();
				}

				nextQ = function(){
					choice = NOCHOICE;
					display_targets();
					//var s=[];
					//for(var i=0;i<nSymbolsThisTrial;i++)
						//s[s.length]=iio.randomInt(0,4);
					display_shapes(DATA[block].trial_symbols[trial]);
					if(state==SESSION_II){
						for(var i=0;i<ts['percent'].length;i++){
							ts['percent'][i].display=true;
							ts['percent'][i].selectCircle.display=true;
						}
					}
					acceptInput=true;
					app.draw();
					bgTimer = setTimeout(function(){
						if(choice==NOCHOICE){
							prompt.text = 'Select an answer quickly...';
							app.draw();
							bgTimer = setTimeout(function(){
								endTrial();
							},extraTime);
						} else endTrial();
					},choiceDuration)
				}

				display_clear = function(){
					prompt.text = '';
					prompt.styles.fillStyle='white';
					for(var i=0;i<shapes.length;i++)
						app.rmv(shapes[i]);
					app.rmv(ts['highlight']);
					if(ts['target'])
						for(var i=0;i<ts['target'].length;i++)
							ts['target'][i].display=false;
					if(ts['percent'])
						for(var i=0;i<ts['percent'].length;i++){
							ts['percent'][i].display=false;
							ts['percent'][i].selectCircle.display=false;
						}
					if(ts['arrow'])
						ts['arrow'].display=false;
				}

				display_results = function(){
					if(choice!=NOCHOICE){
						prompt.text = 'Correct';
						prompt.styles.fillStyle = 'Yellow';
						progressBar.width+=60;
						progressBar.pos.x+=30;
						if(progressBar.width>600)
							progressBar.styles.fillStyle = 'yellow';
					} else if (0==0){
						prompt.text = 'Incorrect';
						prompt.styles.fillStyle = 'Red';
					}
					app.draw();
				}

				display_instructions = function(){
					switch(state){
						case SESSION_I:
							prompt.text = 'Starting a new test. Select a target with the f or j keys';
							break;
						case SESSION_II: 
							prompt.text = 'Starting a new test. Select a percentage value with the asdfjkl; keys';
					}
					prompt.pos.y=app.center.y-yOffset;
					app.draw();
					setTimeout(function(){
						prompt.text='';
						prompt.pos.y = app.center.y-yOffset-160;
						barOutline.display=true;
						progressBar.display=true;
						progressBar.pos.x=app.center.x-299;
						display_clear();
						display_fixationPoint();
					},startDelay)
				}

				display_fixationPoint = function(){
					fixationTime = iio.randomInt(fixMinTime,fixMaxTime);
					fixationPoint.display=true;
					fixationPoint.styles.fillStyle = fixationPoint.color;
					app.draw();
					setTimeout(function(){
						fixationPoint.styles.fillStyle = fixationPoint.color2;
						app.draw();
						setTimeout(function(){
							fixationPoint.display=false;
							nextQ();
						},fixReadyTime)
					},fixationTime+choiceDuration-responseTime);
				}

				display_targets = function(){
					for(var i=0;i<ts['target'].length;i++)
						ts['target'][i].display=true;
				}

				display_shapes = function(keys){
					var cX;
					if(state==SESSION_I)
						cX = app.center.x;
					else if(state=SESSION_II){
						cX = app.width/3*2;
						ts['arrow'].display=true;
					}
					switch(DATA[block].nSymbolsThisTrial[trial][0]){
						case 1:
							shapes[0] = app.add([cX,app.center.y-yOffset],{img:imgs[keys[0]]});
							break;
						case 2:
							var x=-SHAPE_SIZE;
							for(var i=0;i<2;i++,x*=-2)
								shapes[i] = app.add([cX+x,app.center.y-yOffset],{img:imgs[keys[i]]});
							break;
						default:
							var x=-SHAPE_SIZE;
							var y=-SHAPE_SIZE;
							for(var i=0;i<keys.length;i++,x*=-2){
								if(i==2){
									x=-SHAPE_SIZE;
									y*=-2;
								}
								shapes[i] = app.add([cX+x,app.center.y-yOffset+y],{img:imgs[keys[i]]});
							}
							break;
					}
				}
				init();
			};
		    iio.start([App,{color:'black'}])
		</script>
	</body>
</html>