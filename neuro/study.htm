<!DOCTYPE html>
<html>
	<body>
		<script type="text/javascript" src="iioEngine-1.3.js"></script>
		<script src="http://code.jquery.com/jquery-latest.min.js"
        type="text/javascript"></script>
		<script type="text/javascript">

			ChoiceApp = function(app, options){
				//If you need to initialize the app with options
				//use the following technique
				app.setBGColor( options.bgColor ); //retrieve option
				
				//calculate sessionID
				function calcSID(length, chars) 
				{
				    var result = '';
    				for (var i = length; i > 0; --i) 
    					result += chars[Math.round(Math.random() * (chars.length - 1))];
    				return result;
				}
				var id = calcSID(7,'0123456789abcdefghijklmnopqrstuvwxyz');
				
				//Define app properties
				var colors = [];
				colors[0] = 'red';
				colors[1] = 'blue';
				colors[2] = 'yellow';

				//Create the cross
				var horizontal = app.add([app.width/2, app.height*2/5],{
					width: 45,
					height: 4,
					styles:{
						fillStyle:'gray',
						strokeStyle:'gray',
						lineWidth: 4
					}
				});
				var vertical = app.add([app.width/2, app.height*2/5],{
					width: 4,
					height: 45,
					styles:{
						fillStyle:'gray',
						strokeStyle:'gray',
						lineWidth: 4
					}
				});
				
				//Create circles
				circles = [];
				for(var i=0; i<2; i++)
					circles[i] = app.add([0, app.height*2/5], {
						radius: 120,
						styles:{
							fillStyle:colors[i],
							strokeStyle:colors[i],
							lineWidth:3
						}
					});
				for(var j = 2; j < 4; j++)
					circles[j] = app.add([0, app.height*2/5], {
						radius: 140,
						styles:{
							fillStyle:'transparent',
							strokeStyle:'transparent',
							lineWidth:5
						}
					});
				//reposition circles
				circles[0].pos.x = app.width/4;
				circles[1].pos.x = app.width*3/4;
				circles[2].pos.x = app.width/4;
				circles[3].pos.x = app.width*3/4;
				app.draw();

				//add value indicators to the circles 
				var fnt = '60px Consolas';
				var values = [];
				values[0] = 0;
				values[1] = 1;

				//Define properties of the circles
				var isEmptyB = true; //whether or not the left circle contains a reward
				var isEmptyR = true; //whether or not the right circle contains a reward
				var r = 1; //ratio of reward
				var totalR = 0.4; //total probability of getting a reward
				var pB = (1/(r+1))* totalR; //probability of the left circle being rewarded
				var pR = (r/(r+1))*totalR; //probability of the right circle being rewarded
				var ratioSwitch = Math.round(40 + (Math.random()*41)); //the trial number at which the ratio is changed from 1 to 3
				var totalNumTrials = 120; //the total number of trials run
				var test = Math.random();
				var trialNum = 0; 
				var choice = 0; //0 if blue, 1 if red
				var pastChoice = 0;
				var rewardAssignment = -1;
				var rewardHist = 0;

				
				/*
				 * generates a random number that is then compared to the given value
				 * 
				 * returns a boolean that represents if the circle is assigned a
				 * reward or not
				 */
				function calc(prob)
				{
					test = Math.random();
					if (test < prob)
					{
						return false;
					}
					return true;
				}
				
				/*
				 * checks if the circles have rewards assigned to them; if not, then 
				 * the calc function will be called
				 */
				 function checkReward()
				 {
					 if (isEmptyB == true)
					 	 {
					 		isEmptyB = calc(pB); 
					 	 }
					 if (isEmptyR == true)
						 {
						 	isEmptyR = calc(pR);
						 }
				 }
				 
				/*
				 * randomly assigns a color to the circles
				 */
				 function detCircleColor()
				{
					var rand = Math.random();
					var prob = Math.random();
					if (rand < prob)
					{
						circles[0].styles.fillStyle = colors[0];
						circles[0].styles.strokeStyle = colors[0];
						
						circles[1].styles.fillStyle = colors[1];
						circles[1].styles.strokeStyle = colors[1];
					}
					else
					{
						circles[0].styles.fillStyle = colors[1];
						circles[0].styles.strokeStyle = colors[1];
						circles[1].styles.fillStyle = colors[0];
						circles[1].styles.strokeStyle = colors[0];
					}
				}
				/*
				 * Checks to see which circle (if any) has a reward.
				 */

				 function determineRewardAssignment()
				 {
					 if(isEmptyB == false && isEmptyR == false)
					 {
						 rewardAssignment = 2; //both circles have reward
					 }
				 	 else if(isEmptyB == false && isEmptyR == false)
					 {
						 rewardAssignment = 1; //right circle has reward
					 }
				 	 else if(isEmptyB == false && isEmptyR == true)
					 {
						 rewardAssignment = -1; //left circle has reward
					 }
				 	 else
				    {
				 		 rewardAssignment = 0; //neither has reward
				 	}
				 	$.ajax({
					      url:'save?sessionID='+id+'&trial='+trialNum+'&date='+'NULL'+'&choice='+choice+'&pLeft='+pB+'&pRight='+pR+'&lastReward='+rewardHist+'&reward='+rewardAssignment,
					      complete: function (response) {
					          //$('#output').html(response.responseText);
					      },
					      error: function () {
					          //$('#output').html('Bummer: there was an error!');
					      },
					  });
				 }
				
				//reset the display
				 var loopID=0;
				 var resetID=0;
				 function resetScreen()
				 {
					 vertical.styles.fillStyle = 'gray';
					 horizontal.styles.fillStyle = 'gray';
					 vertical.styles.strokeStyle = 'gray';
					 horizontal.styles.strokeStyle = 'gray';
					 prompt.text = '';
					 promptLineTwo.text = '';
				 	 promptL.text = '';
					 promptR.text = '';
					 for(var i = 2; i < circles.length; i++)
					 {
						circles[i].styles.strokeStyle = 'transparent'; 
					 }
					 for(var i = 0; i < 2; i++)
					 {
						circles[i].styles.fillStyle = 'transparent'; 
						circles[i].styles.strokeStyle = 'transparent';
					 }
					 app.draw();
					 resetID = window.setTimeout(function(){
							changeCross();
						}, 1000);
				 }
				 
				 function changeCross()
				 {
					 vertical.styles.fillStyle = 'white';
					 horizontal.styles.fillStyle = 'white';
					 vertical.styles.strokeStyle = 'white';
					 horizontal.styles.strokeStyle = 'white';
					 app.draw();
					 resetID = window.setTimeout(function(){
							resetApp();
						}, 1000);
				 }
				 function resetApp()
				 {
					 pastChoice = choice;
					 trialNum++;
					 clickable = true;
					 prompt.text = 'Choose';
					 //promptLineTwo.text = 'left(f), right(j)';
					 promptL.text = '';
					 promptR.text = '';
					 vertical.styles.fillStyle = 'white';
					 horizontal.styles.fillStyle = 'white';
					 for(var i = 2; i < circles.length; i++)
					 {
						circles[i].styles.strokeStyle = 'transparent'; 
					 }
					 detCircleColor();
					 checkReward();
					 determineRewardAssignment();
					 app.draw();
					 loopID = window.setTimeout(function(){
						prompt.text = 'Too slow. No choice.';
						choice = 0;
						promptLineTwo.text = '';
						app.draw();
						/*resetID = window.setTimeout(function(){
							resetApp();
						}, 5000);*/
						resetID = window.setTimeout(function(){
							resetScreen();
						}, 5000);
					}, 5000);
				 };
				
				 //create a 4-second long loop that runs without being interrupted
				 // and resets the timer every time
				 //handle selection of key presses
				var clickable = true;				 
				document.addEventListener('keydown', function(e)
				{
					window.clearTimeout(loopID);
					window.clearTimeout(resetID);
					/*resetID = window.setTimeout(function(){
						resetApp();
					}, 3000);*/
					resetID = window.setTimeout(function(){
						resetScreen();
					}, 3000);
					prompt.text = '';
					promptLineTwo.text = '';
					if (trialNum == totalNumTrials)
					{
						window.clearTimeout(loopID);
						window.clearTimeout(resetID);
						promptFinal.text = 'Experiment is over. please exit this window.';
					}
					if (trialNum == ratioSwitch)
					{
						r = 3;
						pB = (1/(r+1))* totalR;
						pR = (r/(r+1))* totalR;
					}
					 if(iio.keyCodeIs("f",e))
					 {
						 if (circles[0].styles.fillStyle == colors[0])
						 	{
						 		choice = -1;
						 	}
						 	else
						 	{
						 		choice = 1;
						 	}
						 if (clickable)
						 {
						 clickable = false;
						 //prompt.text = clickable;
						 circles[2].styles.strokeStyle = 'white';
						 app.draw();
							if((!isEmptyB) && (pastChoice == choice))
							{
								resetID = window.setTimeout(function(){
									promptL.text = '+' + values[1];
									promptL.styles.fillStyle = 'yellow';
									app.draw();
								}, 1000);
								//prompt.text = 'L was not empty; test is: ' + test;
								isEmptyB = true;
								rewardHist = -1;
								return;
							}
							else
							{
								resetID = window.setTimeout(function(){
									promptL.text = values[0];
									promptL.styles.fillStyle = 'gray';
									app.draw();
								}, 1000);
								//prompt.text = 'L is empty; test is: ' + test;
								rewardHist = 0;
								return;
							}
						 }
					 }
					 if(iio.keyCodeIs("j",e))
					 {
						 if (circles[1].styles.fillStyle == colors[0])
						 	{
						 		choice = -1;
						 	}
						 	else
						 	{
						 		choice = 1;
						 	}
						 if (clickable)
						 {
						 clickable = false;
						 circles[3].styles.strokeStyle = 'white';
						 app.draw();
						 //prompt.text = clickable;
							if((!isEmptyB) && (pastChoice == choice))
							{
								// this code deals with the timer
								resetID = window.setTimeout(function(){
									promptR.text = '+' + values[1];
									promptR.styles.fillStyle = 'yellow';
									app.draw();
								}, 1000);
								//prompt.text = 'R was not empty; test is: ' + test;
								isEmptyR = true;
								//promptR.text = '+' + values[1];
								//promptR.styles.fillStyle = 'yellow';
								rewardHist = 1;
								//app.draw();
								return;							
							}
							else
							{
								resetID = window.setTimeout(function(){
									promptR.text = values[0];
									promptR.styles.fillStyle = 'gray';
									app.draw();
								}, 1000);
								//prompt.text = 'R is empty; test is: ' + test;
								//promptR.text = values[0];
								//promptR.styles.fillStyle = 'gray';
								rewardHist = 0;
								//app.draw();
								return;
							}
						 }
					 }
				});

				//print prompt
				var prompt = app.add('Choose', 
						[app.center.x, app.height*.12], {
							font:'40px Consolas',
							textAlign:'center',
							styles:{ fillStyle:'white' }
				})
				var promptLineTwo = app.add('left(f), right(j)', 
						[app.center.x, app.height*.18], {
							font:'40px Consolas',
							textAlign:'center',
							styles:{ fillStyle:'white' }
				})
				var promptL = app.add('', 
						[app.width/4, app.height*7/16], {
							font:'80px Consolas',
							textAlign:'center',
							styles:{ fillStyle:'gray' }
				})
				var promptR = app.add('', 
						[app.width*3/4, app.height*7/16], {
							font:'80px Consolas',
							textAlign:'center',
							styles:{ fillStyle:'gray' }
				})

				var promptFinal = app.add('', 
						[app.width/2, app.height/8], {
							font:'40px Consolas',
							textAlign:'center',
							styles:{ fillStyle:'white' }
				})
				 resetApp();
					
				var data = {
						"sessionID": id,
						"trial": trialNum,
						"date": new Date().getTime(), 
						"choice": choice,
						"pBlue": pB,
						"pRed": pR,
						"lastReward": rewardHist,
						"reward": rewardAssignment
				};

			}; 
			//launch without options
			//iio.start(ChoiceApp)

			//launch with options
			iio.start([ChoiceApp, {bgColor:'black'}]);
			

		</script>
	</body>
</html>
