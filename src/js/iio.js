// Generated by CoffeeScript 1.9.0
(function() {
  var iio, root, _ref;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  iio = root.iio = (_ref = root.iio) != null ? _ref : {};

  Array.prototype.insert = function(index, item) {
    this.splice(index, 0, item);
    return this;
  };

  (function() {
    var type, _j, _len, _ref1;
    this.apps = [];

    /*
    Enums for iio object types
     */
    this.APP = {};
    this.OBJ = {};
    this.LINE = {};
    this.X = {};
    this.CIRC = {};
    this.RECT = {};
    this.POLY = {};
    this.GRID = {};
    this.TEXT = {};
    this.colors = {
      aliceblue: true,
      antiquewhite: true,
      aqua: true,
      aquamarine: true,
      azure: true,
      beige: true,
      bisque: true,
      black: true,
      blanchedalmond: true,
      blue: true,
      blueviolet: true,
      brown: true,
      burlywood: true,
      cadetblue: true,
      chartreuse: true,
      chocolate: true,
      coral: true,
      cornflowerblue: true,
      cornsilk: true,
      crimson: true,
      cyan: true,
      darkblue: true,
      darkcyan: true,
      darkgoldenrod: true,
      darkgray: true,
      darkgreen: true,
      darkkhaki: true,
      darkmagenta: true,
      darkolivegreen: true,
      darkorange: true,
      darkorchid: true,
      darkred: true,
      darksalmon: true,
      darkseagreen: true,
      darkslateblue: true,
      darkslategray: true,
      darkturquoise: true,
      darkviolet: true,
      deeppink: true,
      deepskyblue: true,
      dimgray: true,
      dodgerblue: true,
      firebrick: true,
      floralwhite: true,
      forestgreen: true,
      fuchsia: true,
      gainsboro: true,
      ghostwhite: true,
      gold: true,
      goldenrod: true,
      gray: true,
      green: true,
      greenyellow: true,
      honeydew: true,
      hotpink: true,
      indianred: true,
      indigo: true,
      ivory: true,
      khaki: true,
      lavender: true,
      lavenderblush: true,
      lawngreen: true,
      lemonchiffon: true,
      lightblue: true,
      lightcoral: true,
      lightcyan: true,
      lightgoldenrodyellow: true,
      lightgray: true,
      lightgreen: true,
      lightpink: true,
      lightsalmon: true,
      lightseagreen: true,
      lightskyblue: true,
      lightslategray: true,
      lightsteelblue: true,
      lightyellow: true,
      lime: true,
      limegreen: true,
      linen: true,
      magenta: true,
      maroon: true,
      mediumaquamarine: true,
      mediumblue: true,
      mediumorchid: true,
      mediumpurple: true,
      mediumseagreen: true,
      mediumslateblue: true,
      mediumspringgreen: true,
      mediumturquoise: true,
      mediumvioletred: true,
      midnightblue: true,
      mintcream: true,
      mistyrose: true,
      moccasin: true,
      navajowhite: true,
      navy: true,
      oldlace: true,
      olive: true,
      olivedrab: true,
      orange: true,
      orangered: true,
      orchid: true,
      palegoldenrod: true,
      palegreen: true,
      paleturquoise: true,
      palevioletred: true,
      papayawhip: true,
      peachpuff: true,
      peru: true,
      pink: true,
      plum: true,
      powderblue: true,
      purple: true,
      red: true,
      rosybrown: true,
      royalblue: true,
      saddlebrown: true,
      salmon: true,
      sandybrown: true,
      seagreen: true,
      seashell: true,
      sienna: true,
      silver: true,
      skyblue: true,
      slateblue: true,
      slategray: true,
      snow: true,
      springgreen: true,
      steelblue: true,
      tan: true,
      teal: true,
      thistle: true,
      tomato: true,
      turquoise: true,
      violet: true,
      wheat: true,
      white: true,
      whitesmoke: true,
      yellow: true,
      yellowgreen: true
    };

    /*
    Utility functions
     */
    this.addEvent = function(obj, event, callback, capt) {
      if (obj.addEventListener) {
        obj.addEventListener(event, callback, capt);
        return true;
      } else if (obj.attachEvent) {
        obj.attachEvent("on" + event, callback);
        return true;
      } else {
        return false;
      }
    };
    this.set = function(objects, properties) {
      var object, _j, _len, _results;
      _results = [];
      for (_j = 0, _len = objects.length; _j < _len; _j++) {
        object = objects[_j];
        _results.push(object.set(properties));
      }
      return _results;
    };
    this.cancelLoop = function(l) {
      window.clearTimeout(l);
      return window.cancelAnimationFrame(l);
    };
    this.cancelLoops = function(o, c) {
      var l, obj, _j, _k, _len, _len1, _ref1, _ref2, _results;
      _ref1 = o.loops;
      for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
        l = _ref1[_j];
        this.cancelLoop(l.id);
      }
      if (o.mainLoop) {
        this.cancelLoop(o.mainLoop.id);
      }
      if (c == null) {
        _ref2 = o.objs;
        _results = [];
        for (_k = 0, _len1 = _ref2.length; _k < _len1; _k++) {
          obj = _ref2[_k];
          _results.push(this.cancelLoops(obj));
        }
        return _results;
      }
    };
    this.resize = function() {
      var app, _j, _len, _ref1, _results;
      _ref1 = this.apps;
      _results = [];
      for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
        app = _ref1[_j];
        if (app.canvas.fullscreen) {
          app.width = app.canvas.width = $ ? $(window).width() : window.innerWidth;
          app.height = app.canvas.height = $ ? $(window).height() : window.innerHeight;
        }
        app.center.x = app.canvas.width / 2;
        app.center.y = app.canvas.height / 2;
        if (app.runScript && app.runScript.resize) {
          app.runScript.resize();
        }
        _results.push(app.draw());
      }
      return _results;
    };
    this.prepInput = function() {
      window.onresize = this.resize;
      this.addEvent(window, 'keydown', (function(_this) {
        return function(event) {
          var app, key, _j, _len, _ref1, _results;
          key = _this.getKeyString(event);
          _ref1 = _this.apps;
          _results = [];
          for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
            app = _ref1[_j];
            if (app.runScript && app.runScript.onKeyDown) {
              _results.push(app.runScript.onKeyDown(event, key));
            }
          }
          return _results;
        };
      })(this));
      this.addEvent(window, 'keyup', (function(_this) {
        return function(event) {
          var app, key, _j, _len, _ref1, _results;
          key = _this.getKeyString(event);
          _ref1 = _this.apps;
          _results = [];
          for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
            app = _ref1[_j];
            if (app.runScript && app.runScript.onKeyUp) {
              _results.push(app.runScript.onKeyUp(event, key));
            }
          }
          return _results;
        };
      })(this));
      return this.addEvent(window, 'scroll', (function(_this) {
        return function(event) {
          var app, p, _j, _len, _ref1, _results;
          _ref1 = _this.apps;
          _results = [];
          for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
            app = _ref1[_j];
            p = app.canvas.getBoundingClientRect();
            _results.push(app.pos = {
              x: p.left,
              y: p.top
            });
          }
          return _results;
        };
      })(this));
    };
    this.prepInput();
    _ref1 = ['Function', 'Number', 'String'];
    for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
      type = _ref1[_j];
      this["is" + type] = function(obj) {
        return toString.call(obj) === ("[object " + type + "]");
      };
    }
    this.isImage = function(imgName) {
      return ['png', 'jpg', 'gif', 'tiff'].some(function(ext) {
        return imgName.indexOf("." + ext) !== -1;
      });
    };
    this.isBetween = function(val, bound1, bound2) {
      return (bound1 <= val && val <= bound2) || (bound2 <= val && val <= bound1);
    };
    this.random = {
      num: function(min, max) {
        min = min != null ? min : 0;
        min = max != null ? max : 1;
        return Math.random() * (max - min) + min;
      },
      int: function(min, max) {
        return Math.floor(this.num(min, max));
      },
      color: function() {
        return "rgb(" + (Math.floor(Math.random() * 255)) + ", " + (Math.floor(Math.random() * 255)) + ", " + (Math.floor(Math.random() * 255)) + ")";
      }
    };
    this.color = {
      random: this.random.color,
      invert: function(color) {
        var rgb;
        if (color.indexOf("rgb") !== -1) {
          rgb = color.match(/(\d+)/g);
          return "rgb(" + ((255 - parseInt(rgb[0])) || 0) + ", " + ((255 - parseInt(rgb[1])) || 0) + ", " + ((255 - parseInt(rgb[2])) || 0) + ")";
        }
      }
    };
    this.bounds = {
      resolve: function(bound, c) {
        if (bound.length > 1) {
          return bound[1](c);
        } else {
          return true;
        }
      },
      overUpperLimit: function(bound, limit, c) {
        if (lim > bound[0]) {
          return this.resolve(bound, c);
        } else {
          return false;
        }
      },
      belowLowerLimit: function(bound, limit, c) {
        if (lim < bound[0]) {
          return this.resolve(bound, c);
        } else {
          return false;
        }
      }
    };
    this.point = {
      rotate: function(x, y, r) {
        if (r === 0) {
          return {
            x: x,
            y: y
          };
        }
        if (x.x != null) {
          r = y;
          y = x.y;
          x = x.x;
        }
        return {
          x: x * Math.cos(r) - y * Math.sin(r),
          y: y * Math.cos(r) + x * Math.sin(r)
        };
      },
      vector: function(points) {
        var i, vecs, _, _k, _len1;
        if (!(points instanceof Array)) {
          points = [points];
        }
        vecs = [];
        for (i = _k = 0, _len1 = points.length; _k < _len1; i = ++_k) {
          _ = points[i];
          if (points[i].x != null) {
            vecs.push(points[i]);
          } else {
            vecs.push({
              x: points[i],
              y: points[i + 1]
            });
          }
        }
        return vecs;
      }
    };
    this.getKeyString = function(event) {
      switch (e.keyCode) {
        case 8:
          return 'backspace';
        case 9:
          return 'tab';
        case 13:
          return 'enter';
        case 16:
          return 'shift';
        case 17:
          return 'ctrl';
        case 18:
          return 'alt';
        case 19:
          return 'pause';
        case 20:
          return 'caps lock';
        case 27:
          return 'escape';
        case 32:
          return 'space';
        case 33:
          return 'page up';
        case 34:
          return 'page down';
        case 35:
          return 'end';
        case 36:
          return 'home';
        case 37:
          return 'left arrow';
        case 38:
          return 'up arrow';
        case 39:
          return 'right arrow';
        case 40:
          return 'down arrow';
        case 45:
          return 'insert';
        case 46:
          return 'delete';
        case 48:
          return '0';
        case 49:
          return '1';
        case 50:
          return '2';
        case 51:
          return '3';
        case 52:
          return '4';
        case 53:
          return '5';
        case 54:
          return '6';
        case 55:
          return '7';
        case 56:
          return '8';
        case 57:
          return '9';
        case 65:
          return 'a';
        case 66:
          return 'b';
        case 67:
          return 'c';
        case 68:
          return 'd';
        case 69:
          return 'e';
        case 70:
          return 'f';
        case 71:
          return 'g';
        case 72:
          return 'h';
        case 73:
          return 'i';
        case 74:
          return 'j';
        case 75:
          return 'k';
        case 76:
          return 'l';
        case 77:
          return 'm';
        case 78:
          return 'n';
        case 79:
          return 'o';
        case 80:
          return 'p';
        case 81:
          return 'q';
        case 82:
          return 'r';
        case 83:
          return 's';
        case 84:
          return 't';
        case 85:
          return 'u';
        case 86:
          return 'v';
        case 87:
          return 'w';
        case 88:
          return 'x';
        case 89:
          return 'y';
        case 90:
          return 'z';
        case 91:
          return 'left window';
        case 92:
          return 'right window';
        case 93:
          return 'select key';
        case 96:
          return 'n0';
        case 97:
          return 'n1';
        case 98:
          return 'n2';
        case 99:
          return 'n3';
        case 100:
          return 'n4';
        case 101:
          return 'n5';
        case 102:
          return 'n6';
        case 103:
          return 'n7';
        case 104:
          return 'n8';
        case 105:
          return 'n9';
        case 106:
          return 'multiply';
        case 107:
          return 'add';
        case 109:
          return 'subtract';
        case 110:
          return 'dec';
        case 111:
          return 'divide';
        case 112:
          return 'f1';
        case 113:
          return 'f2';
        case 114:
          return 'f3';
        case 115:
          return 'f4';
        case 116:
          return 'f5';
        case 117:
          return 'f6';
        case 118:
          return 'f7';
        case 119:
          return 'f8';
        case 120:
          return 'f9';
        case 121:
          return 'f10';
        case 122:
          return 'f11';
        case 123:
          return 'f12';
        case 144:
          return 'num lock';
        case 156:
          return 'scroll lock';
        case 186:
          return 'semi-colon';
        case 187:
          return 'equal';
        case 188:
          return 'comma';
        case 189:
          return 'dash';
        case 190:
          return 'period';
        case 191:
          return 'forward slash';
        case 192:
          return 'grave accent';
        case 219:
          return 'open bracket';
        case 220:
          return 'back slash';
        case 221:
          return 'close bracket';
        case 222:
          return 'single quote';
        default:
          return 'undefined';
      }
    };
    this.codeIs = function(keys, event) {
      var str;
      if (!(keys instanceof Array)) {
        keys = [keys];
      }
      str = this.getKeyString(event);
      return keys.some(function(key) {
        return key === str;
      });
    };
    this.vector = {
      add: function(v1, v2) {
        var p, v, _k, _len1;
        v = {};
        for (_k = 0, _len1 = v2.length; _k < _len1; _k++) {
          p = v2[_k];
          if (v1[p]) {
            v[p] = v1[p] + v2[p];
          }
        }
        return v;
      },
      sub: function(v1, v2) {
        var p, v, _k, _len1;
        v = {};
        for (_k = 0, _len1 = v2.length; _k < _len1; _k++) {
          p = v2[_k];
          if (v1[p]) {
            v[p] = v1[p] - v2[p];
          }
        }
        return v;
      },
      mult: function(v1, v2) {
        var p, v, _k, _len1;
        v = {};
        for (_k = 0, _len1 = v2.length; _k < _len1; _k++) {
          p = v2[_k];
          if (v1[p]) {
            v[p] = v1[p] * v2[p];
          }
        }
        return v;
      },
      div: function(v1, v2) {
        var p, v, _k, _len1;
        v = {};
        for (_k = 0, _len1 = v2.length; _k < _len1; _k++) {
          p = v2[_k];
          if (v1[p]) {
            v[p] = v1[p] / v2[p];
          }
        }
        return v;
      },
      dist: function(v1, v2) {
        var p, sumDiffSquared, _k, _len1;
        sumDiffSquared = 0;
        for (_k = 0, _len1 = v2.length; _k < _len1; _k++) {
          p = v2[_k];
          if (v1[p]) {
            sumDiffSquared += Math.pow(v1[p] - v2[p], 2);
          }
        }
        return Math.sqrt(sumDiffSquared);
      }
    };
    this.canvas = {
      create: function(width, height) {
        var canvas;
        canvas = document.createElement('canvas');
        if (width) {
          canvas.width = width;
          canvas.height = height;
        } else {
          canvas.margin = 0;
          canvas.padding = 0;
          canvas.style.position = 'absolute';
          canvas.fullscreen = true;
          canvas.width = $ ? $(document).width() : window.innerWidth;
          canvas.height = $ ? $(document).height() : window.innerHeight;
        }
        return canvas;
      },
      prep: function(id, d) {
        var canvas;
        if (id) {
          canvas = document.getElementById(id);
          if (canvas == null) {
            if (id.tagName === 'CANVAS') {
              canvas = id;
            } else if (iio.isNumber(id) || id.x) {
              canvas = this.create(id.x || id, id.y || id);
              (d || document.body).appendChild(canvas);
            }
          }
        } else {
          this.prepFullscreen();
          canvas = this.create();
          document.body.appendChild(canvas);
        }
        return canvas;
      },
      prepFullscreen: function() {
        return document.body.style.margin = document.body.style.padding = 0;
      },
      prepInput: function(object) {
        return object.onmousedown = function(event) {
          var cell, eventPos, i, obj, _k, _len1, _ref2;
          eventPos = this.parent.convertEventPos(event);
          if (this.parent.click) {
            this.parent.click(event, eventPos);
          }
          _ref2 = this.parent.objs;
          for (i = _k = 0, _len1 = _ref2.length; _k < _len1; i = ++_k) {
            obj = _ref2[i];
            if (i !== 0) {
              eventPos = this.parent.convertEventPos(event);
            }
            if (obj.contains && obj.contains(eventPos)) {
              if (obj.click) {
                if (obj.type === iio.GRID) {
                  cell = obj.cellAt(eventPos);
                  obj.click(event, eventPos, cell, obj.cellCenter(cell.c, cell.r));
                } else {
                  obj.click(event, eventPos);
                }
              }
            }
          }
        };
      }
    };
    this.collision = {
      check: function(obj1, obj2) {
        if ((obj1 == null) || (obj2 == null)) {
          return false;
        }
        if (obj1.type === iio.RECT && obj2.type === iio.RECT) {
          if (obj1.simple) {
            if (obj2.simple) {
              return this.rectXrect(obj1.pos.x - obj1.bbx[0], obj1.pos.x + obj1.bbx[0], obj1.pos.y - (obj1.bbx[1] || obj1.bbx[0]), obj1.pos.y + (obj1.bbx[1] || obj1.bbx[0]), obj2.pos.x - obj2.bbx[0], obj2.pos.x + obj2.bbx[0], obj2.pos.y - (obj2.bbx[1] || obj2.bbx[0]), obj2.pos.y + (obj2.bbx[1] || obj2.bbx[0]));
            } else {
              return this.rectXrect(obj1.pos.x - obj1.bbx[0], obj1.pos.x + obj1.bbx[0], obj1.pos.y - (obj1.bbx[1] || obj1.bbx[0]), obj1.pos.y + (obj1.bbx[1] || obj1.bbx[0]), obj2.left, obj2.right, obj2.top, obj2.bottom);
            }
          } else if (obj2.simple) {
            return this.rectXrect(obj1.left, obj1.right, obj1.top, obj1.bottom, obj2.pos.x - obj2.bbx[0], obj2.pos.x + obj2.bbx[0], obj2.pos.y - (obj2.bbx[1] || obj2.bbx[0]), obj2.pos.y + (obj2.bbx[1] || obj2.bbx[0]));
          } else {
            return this.rectXrect(obj1.left, obj1.right, obj1.top, obj1.bottom, obj2.left, obj2.right, obj2.top, obj2.bottom);
          }
        }
      },
      rectXrect: function(r1L, r1R, r1T, r1B, r2L, r2R, r2T, r2B) {
        if (r1L < r2R || r1R > r2L || r1T < r2B || r1B > r2T) {
          return true;
        } else {
          return false;
        }
      }
    };
    this.draw = {
      line: function(ctx, x, y, x1, y1) {
        ctx.beginPath();
        ctx.moveTo(x, y);
        ctx.lineTo(x1, y1);
        return ctx.stroke();
      },
      rect: function(ctx, w, h, s, p) {
        if (p.round) {
          ctx.beginPath();
          ctx.moveTo(p.round[0], 0);
          ctx.lineTo(w - p.round[1], 0);
          ctx.quadraticCurveTo(w, 0, w, p.round[1]);
          ctx.lineTo(w, h - p.round[2]);
          ctx.quadraticCurveTo(w, h, w - p.round[2], h);
          ctx.lineTo(p.round[3], h);
          ctx.quadraticCurveTo(0, h, 0, h - p.round[3]);
          ctx.lineTo(0, p.round[0]);
          ctx.quadraticCurveTo(0, 0, p.round[0], 0);
          ctx.closePath();
          ctx.stroke();
          ctx.fill();
          return ctx.clip();
        } else {
          if (s.c) {
            ctx.fillRect(0, 0, w, h);
          }
          if (p.img) {
            ctx.drawImage(p.img, 0, 0, w, h);
          }
          if (p.anims) {
            ctx.drawImage(p.anims[p.animKey].frames[p.animFrame].src, p.anims[p.animKey].frames[p.animFrame].x, p.anims[p.animKey].frames[p.animFrame].y, p.anims[p.animKey].frames[p.animFrame].w, p.anims[p.animKey].frames[p.animFrame].h, 0, 0, w, h);
          }
          if (s.o) {
            return ctx.strokeRect(0, 0, w, h);
          }
        }
      },
      poly: function(ctx, vectors, bezier, open) {
        var i, vector, vector0, _i, _k, _l, _len1, _len2;
        ctx.beginPath();
        ctx.moveTo(0, 0);
        if (bezier) {
          _i = 0;
          for (i = _k = 0, _len1 = vectors.length; _k < _len1; i = ++_k) {
            vector = vectors[i];
            ctx.bezierCurveTo(bezier[_i++] || vectors[i - 1].x - vectors[0].x, bezier[_i++] || vectors[i - 1].y - vectors[0].y, bezier[_i++] || vector.x - vectors[0].x, bezier[_i++] || vector.y - vectors[0].y, vector.x - vectors[0].x, vector.y - vectors[0].y);
          }
          if ((open == null) || !open) {
            i--;
            ctx.bezierCurveTo(bezier[_i++] || vectors[i].x - vectors[0].x, bezier[_i++] || vectors[i].y - vectors[0].y, bezier[_i++] || 0, bezier[_i++] || 0, 0, 0);
          }
        } else {
          vector0 = vectors[0];
          for (_l = 0, _len2 = vectors.length; _l < _len2; _l++) {
            vector = vectors[_l];
            ctx.lineTo(vector.x - vector0.x, vector.y - vector0.y);
          }
        }
        if ((open == null) || !open) {
          return ctx.closePath();
        }
      },
      finishPathShape: function(ctx, obj) {
        if (obj.color) {
          ctx.fill();
        }
        if (obj.img) {
          ctx.drawImage(obj.img, -obj.width / 2, -obj.height / 2, obj.width, obj.height);
        }
        if (obj.outline) {
          ctx.stroke();
        }
        if (obj.clip) {
          return ctx.clip();
        }
      },
      prepShape: function(ctx, obj) {
        if (obj.color) {
          if (obj.color.indexOf && obj.color.indexOf('gradient') !== -1) {
            obj.color = obj.createGradient(ctx, obj.color);
          }
          ctx.fillStyle = obj.color;
        }
        if (obj.outline) {
          if (obj.outline.indexOf && obj.outline.indexOf('gradient') !== -1) {
            obj.outline = o.createGradient(ctx, obj.outline);
          }
          ctx.lineWidth = obj.lineWidth;
          return ctx.strokeStyle = obj.outline;
        }
      },
      prepX: function(ctx, obj) {
        ctx.save();
        if (obj.color.indexOf && obj.color.indexOf('gradient') !== -1) {
          obj.color = obj.createGradient(ctx, obj.color);
        }
        ctx.lineWidth = obj.lineWidth;
        return ctx.strokeStyle = obj.color || obj.outline;
      },
      obj: function(ctx) {
        var drawnSelf, obj, _k, _len1, _ref2;
        if (this.hidden) {
          return;
        }
        if (ctx == null) {
          ctx = this.app.ctx;
        }
        ctx.save();
        if (this.origin) {
          ctx.translate(this.origin.x, this.origin.y);
        } else {
          ctx.translate(this.pos.x, this.pos.y);
        }
        if (this.rot !== 0) {
          ctx.rotate(this.rot);
        }
        if (this.objs.length > 0) {
          drawnSelf = false;
          _ref2 = this.objs;
          for (_k = 0, _len1 = _ref2.length; _k < _len1; _k++) {
            obj = _ref2[_k];
            if (!drawnSelf && obj.z >= this.z) {
              this.finishDraw(ctx);
              drawnSelf = true;
            }
            if (obj.draw) {
              obj.draw(ctx);
            }
          }
          if (!drawnSelf) {
            this.finishDraw(ctx);
          }
        } else {
          this.finishDraw(ctx);
        }
        return ctx.restore();
      },
      finishObj: function(ctx) {
        var i, shadow, shadows, _k, _len1;
        ctx.save();
        ctx.globalAlpha = this.alpha;
        if (this.lineCap) {
          ctx.lineCap = this.lineCap;
        }
        if (this.shadow) {
          shadows = this.shadow.split(' ');
          for (_k = 0, _len1 = shadows.length; _k < _len1; _k++) {
            shadow = shadows[_k];
            if (iio.isNumber(shadow)) {
              ctx.shadowBlur = shadow;
            } else if (shadow.indexOf(':') !== -1) {
              i = shadow.indexOf(':');
              ctx.shadowOffsetX = shadow.substring(0, i);
              ctx.shadowOffsetY = shadow.substring(i + 1);
            } else {
              ctx.shadowColor = shadow;
            }
          }
        }
        if (this.dash) {
          if (this.dash.length > 1 && this.dash.length % 2 === 1) {
            ctx.lineDashOffset = this.dash[this.dash.length - 1];
          }
          ctx.setLineDash(this.dash);
        }
        this.drawType(ctx);
        return ctx.restore();
      }
    };
    this.set = function(properties, noDraw) {
      var key, property, _k, _l, _len1, _len2;
      if (properties == null) {
        return this;
      }
      if (properties.x && properties.y) {
        this.pos.x = properties.x;
        this.pos.y = properties.y;
        return this;
      }
      if (properties instanceof Array) {
        for (_k = 0, _len1 = properties.length; _k < _len1; _k++) {
          property = properties[_k];
          this.set(property, noDraw);
        }
      } else {
        for (_l = 0, _len2 = properties.length; _l < _len2; _l++) {
          key = properties[_l];
          this[key] = properties[key];
        }
      }
      if (this.height == null) {
        this.height = this.width;
      }
      this.update(this);
      if (!noDraw) {
        this.app.draw();
      }
      return this;
    };
    this.clear = function() {
      this.objs = [];
      return this.app.draw();
    };
    return this.updatePhysics = function(obj, dt) {
      var remove, _k, _len1, _obj, _ref2, _results;
      if (this.update) {
        this.update(dt);
      }
      remove = false;
      if (this.bounds && !this.simple) {
        if (this.bounds.right) {
          remove = iio.bounds.overUpperLimit(this.bounds.right, this.right, this);
        }
        if (this.bounds.left) {
          remove = iio.bounds.belowLowerLimit(this.bounds.left, this.left, this);
        }
        if (this.bounds.top) {
          remove = iio.bounds.belowLowerLimit(this.bounds.top, this.top, this);
        }
        if (this.bounds.bottom) {
          remove = iio.bounds.overUpperLimit(this.bounds.bottom, this.bottom, this);
        }
      } else if (this.bounds) {
        if (this.bounds.right) {
          remove = iio.bounds.overUpperLimit(this.bounds.right, this.pos.x, this);
        }
        if (this.bounds.left) {
          remove = iio.bounds.belowLowerLimit(this.bounds.left, this.pos.x, this);
        }
        if (this.bounds.top) {
          remove = iio.bounds.belowLowerLimit(this.bounds.top, this.pos.y, this);
        }
        if (this.bounds.bottom) {
          remove = iio.bounds.overUpperLimit(this.bounds.bottom, this.pos.y, this);
        }
      }
      if (this.shrink) {
        remove = this.shrink instanceof Array ? this._shrink(this.shrink[0], this.shrink[1]) : this._shrink(this.shrink);
      }
      if (this.fade) {
        remove = this.fade instanceof Array ? this._fade(this.fade[0], this.fade[1]) : this._fade(this.fade);
      }
      if (remove) {
        return remove;
      }
      this.vel.x += this.acc.y;
      this.vel.y += this.acc.y;
      this.vel.r += this.acc.r;
      this.pos.x += this.vel.x;
      this.pos.y += this.vel.y;
      this.rot += this.vel.r;
      if (!this.simple) {
        this.updateProps(this.vel);
      }
      _ref2 = this.objs;
      _results = [];
      for (_k = 0, _len1 = _ref2.length; _k < _len1; _k++) {
        _obj = _ref2[_k];
        if (_obj._update && _obj._update(obj, dt)) {
          _results.push(this.remove(_obj));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
  }).call(iio);

}).call(this);
