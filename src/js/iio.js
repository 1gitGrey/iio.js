// Generated by CoffeeScript 1.9.1
(function() {
  var iio, ref, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  iio = root.iio = (ref = root.iio) != null ? ref : {};

  Array.prototype.insert = function(index, item) {
    this.splice(index, 0, item);
    return this;
  };

  (function() {
    var j, len, ref1, type;
    this.apps = [];

    /*
    Enums for iio object types
     */
    this.APP = {};
    this.OBJ = {};
    this.LINE = {};
    this.X = {};
    this.CIRC = {};
    this.RECT = {};
    this.POLY = {};
    this.GRID = {};
    this.TEXT = {};
    this.colors = {
      aliceblue: true,
      antiquewhite: true,
      aqua: true,
      aquamarine: true,
      azure: true,
      beige: true,
      bisque: true,
      black: true,
      blanchedalmond: true,
      blue: true,
      blueviolet: true,
      brown: true,
      burlywood: true,
      cadetblue: true,
      chartreuse: true,
      chocolate: true,
      coral: true,
      cornflowerblue: true,
      cornsilk: true,
      crimson: true,
      cyan: true,
      darkblue: true,
      darkcyan: true,
      darkgoldenrod: true,
      darkgray: true,
      darkgreen: true,
      darkkhaki: true,
      darkmagenta: true,
      darkolivegreen: true,
      darkorange: true,
      darkorchid: true,
      darkred: true,
      darksalmon: true,
      darkseagreen: true,
      darkslateblue: true,
      darkslategray: true,
      darkturquoise: true,
      darkviolet: true,
      deeppink: true,
      deepskyblue: true,
      dimgray: true,
      dodgerblue: true,
      firebrick: true,
      floralwhite: true,
      forestgreen: true,
      fuchsia: true,
      gainsboro: true,
      ghostwhite: true,
      gold: true,
      goldenrod: true,
      gray: true,
      green: true,
      greenyellow: true,
      honeydew: true,
      hotpink: true,
      indianred: true,
      indigo: true,
      ivory: true,
      khaki: true,
      lavender: true,
      lavenderblush: true,
      lawngreen: true,
      lemonchiffon: true,
      lightblue: true,
      lightcoral: true,
      lightcyan: true,
      lightgoldenrodyellow: true,
      lightgray: true,
      lightgreen: true,
      lightpink: true,
      lightsalmon: true,
      lightseagreen: true,
      lightskyblue: true,
      lightslategray: true,
      lightsteelblue: true,
      lightyellow: true,
      lime: true,
      limegreen: true,
      linen: true,
      magenta: true,
      maroon: true,
      mediumaquamarine: true,
      mediumblue: true,
      mediumorchid: true,
      mediumpurple: true,
      mediumseagreen: true,
      mediumslateblue: true,
      mediumspringgreen: true,
      mediumturquoise: true,
      mediumvioletred: true,
      midnightblue: true,
      mintcream: true,
      mistyrose: true,
      moccasin: true,
      navajowhite: true,
      navy: true,
      oldlace: true,
      olive: true,
      olivedrab: true,
      orange: true,
      orangered: true,
      orchid: true,
      palegoldenrod: true,
      palegreen: true,
      paleturquoise: true,
      palevioletred: true,
      papayawhip: true,
      peachpuff: true,
      peru: true,
      pink: true,
      plum: true,
      powderblue: true,
      purple: true,
      red: true,
      rosybrown: true,
      royalblue: true,
      saddlebrown: true,
      salmon: true,
      sandybrown: true,
      seagreen: true,
      seashell: true,
      sienna: true,
      silver: true,
      skyblue: true,
      slateblue: true,
      slategray: true,
      snow: true,
      springgreen: true,
      steelblue: true,
      tan: true,
      teal: true,
      thistle: true,
      tomato: true,
      turquoise: true,
      violet: true,
      wheat: true,
      white: true,
      whitesmoke: true,
      yellow: true,
      yellowgreen: true
    };

    /*
    Utility functions
     */
    this.addEvent = function(obj, event, callback, capt) {
      if (obj.addEventListener) {
        obj.addEventListener(event, callback, capt);
        return true;
      } else if (obj.attachEvent) {
        obj.attachEvent("on" + event, callback);
        return true;
      } else {
        return false;
      }
    };
    this.set = function(objects, property) {
      var j, len, object, results;
      results = [];
      for (j = 0, len = objects.length; j < len; j++) {
        object = objects[j];
        results.push(object.set(property));
      }
      return results;
    };
    this.cancelLoop = function(l) {
      window.clearTimeout(l);
      return window.cancelAnimationFrame(l);
    };
    this.cancelLoops = function(o, c) {
      var j, k, l, len, len1, obj, ref1, ref2, results;
      ref1 = o.loops;
      for (j = 0, len = ref1.length; j < len; j++) {
        l = ref1[j];
        this.cancelLoop(l.id);
      }
      if (o.mainLoop) {
        this.cancelLoop(o.mainLoop.id);
      }
      if (c == null) {
        ref2 = o.objs;
        results = [];
        for (k = 0, len1 = ref2.length; k < len1; k++) {
          obj = ref2[k];
          results.push(this.cancelLoops(obj));
        }
        return results;
      }
    };
    this.resize = function() {
      var app, j, len, ref1, results;
      ref1 = this.apps;
      results = [];
      for (j = 0, len = ref1.length; j < len; j++) {
        app = ref1[j];
        if (app.canvas.fullscreen) {
          app.width = app.canvas.width = $ ? $(window).width() : window.innerWidth;
          app.height = app.canvas.height = $ ? $(window).height() : window.innerHeight;
        }
        app.center.x = app.canvas.width / 2;
        app.center.y = app.canvas.height / 2;
        if (app.runScript && app.runScript.resize) {
          app.runScript.resize();
        }
        results.push(app.draw());
      }
      return results;
    };
    ref1 = ['Function', 'Number', 'String'];
    for (j = 0, len = ref1.length; j < len; j++) {
      type = ref1[j];
      this["is" + type] = function(obj) {
        return toString.call(obj) === ("[object " + type + "]");
      };
    }
    this.isImage = function(imgName) {
      return ['png', 'jpg', 'gif', 'tiff'].some(function(ext) {
        return imgName.indexOf("." + ext) !== -1;
      });
    };
    this.isBetween = function(val, bound1, bound2) {
      return (bound1 <= val && val <= bound2) || (bound2 <= val && val <= bound1);
    };
    this.random = {
      num: function(min, max) {
        min = min != null ? min : 0;
        min = max != null ? max : 1;
        return Math.random() * (max - min) + min;
      },
      int: function(min, max) {
        return Math.floor(this.num(min, max));
      },
      color: function() {
        return "rgb(" + (Math.floor(Math.random() * 255)) + ", " + (Math.floor(Math.random() * 255)) + ", " + (Math.floor(Math.random() * 255)) + ")";
      }
    };
    this.color = {
      random: this.random.color
    };
    this.bounds = {
      resolve: function(b, c) {
        if (b.length > 1) {
          return b[1](c);
        } else {
          return true;
        }
      }
    };
    return this.point = {
      rotate: function(x, y, r) {
        if (r === 0) {
          return {
            x: x,
            y: y
          };
        }
        if (x.x != null) {
          r = y;
          y = x.y;
          x = x.x;
        }
        return {
          x: x * Math.cos(r) - y * Math.sin(r),
          y: y * Math.cos(r) + x * Math.sin(r)
        };
      },
      vector: function(points) {
        var _, i, k, len1, vecs;
        if (!(points instanceof Array)) {
          points = [points];
        }
        vecs = [];
        for (i = k = 0, len1 = points.length; k < len1; i = ++k) {
          _ = points[i];
          if (points[i].x != null) {
            vecs.push(points[i]);
          } else {
            vecs.push({
              x: points[i],
              y: points[i + 1]
            });
          }
        }
        return vecs;
      }
    };
  }).call(iio);

}).call(this);
